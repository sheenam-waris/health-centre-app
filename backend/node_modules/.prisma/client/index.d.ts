
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model users
 * 
 */
export type users = {
  user_id: number
  name: string
  email: string
  passwordHash: string
  gender: string
  dob: string
  phone: string
  role: number
}

/**
 * Model patient
 * 
 */
export type patient = {
  patient_id: number
  rollno: string
  address: string
  hostel_details: string
}

/**
 * Model appointment
 * 
 */
export type appointment = {
  app_id: number
  patient_id: number
  reason: string
  schedule_time: string
  status: STATUS | null
  visited: boolean
  reporting_time: string | null
  treatment_name: string | null
  prescription_details: string | null
  advice: string | null
}

/**
 * Model medical_certificate
 * 
 */
export type medical_certificate = {
  mc_id: number
  patient_id: number
  app_id: number
  purpose: string
  duration: string
  requested_at: string
  status: STATUS
  approved_at: string | null
  approved_by: string | null
}

/**
 * Model sessions
 * 
 */
export type sessions = {
  email: string
  token: string
  generated_at: Date
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const STATUS: {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

export type STATUS = (typeof STATUS)[keyof typeof STATUS]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<GlobalReject>;

  /**
   * `prisma.patient`: Exposes CRUD operations for the **patient** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Patients
    * const patients = await prisma.patient.findMany()
    * ```
    */
  get patient(): Prisma.patientDelegate<GlobalReject>;

  /**
   * `prisma.appointment`: Exposes CRUD operations for the **appointment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Appointments
    * const appointments = await prisma.appointment.findMany()
    * ```
    */
  get appointment(): Prisma.appointmentDelegate<GlobalReject>;

  /**
   * `prisma.medical_certificate`: Exposes CRUD operations for the **medical_certificate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Medical_certificates
    * const medical_certificates = await prisma.medical_certificate.findMany()
    * ```
    */
  get medical_certificate(): Prisma.medical_certificateDelegate<GlobalReject>;

  /**
   * `prisma.sessions`: Exposes CRUD operations for the **sessions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.sessions.findMany()
    * ```
    */
  get sessions(): Prisma.sessionsDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.12.0
   * Query Engine version: 659ef412370fa3b41cd7bf6e94587c1dfb7f67e7
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    users: 'users',
    patient: 'patient',
    appointment: 'appointment',
    medical_certificate: 'medical_certificate',
    sessions: 'sessions'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type PatientCountOutputType
   */


  export type PatientCountOutputType = {
    appointments: number
    medical_certs: number
  }

  export type PatientCountOutputTypeSelect = {
    appointments?: boolean
    medical_certs?: boolean
  }

  export type PatientCountOutputTypeGetPayload<S extends boolean | null | undefined | PatientCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? PatientCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (PatientCountOutputTypeArgs)
    ? PatientCountOutputType 
    : S extends { select: any } & (PatientCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof PatientCountOutputType ? PatientCountOutputType[P] : never
  } 
      : PatientCountOutputType




  // Custom InputTypes

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the PatientCountOutputType
     */
    select?: PatientCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model users
   */


  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    user_id: number | null
    role: number | null
  }

  export type UsersSumAggregateOutputType = {
    user_id: number | null
    role: number | null
  }

  export type UsersMinAggregateOutputType = {
    user_id: number | null
    name: string | null
    email: string | null
    passwordHash: string | null
    gender: string | null
    dob: string | null
    phone: string | null
    role: number | null
  }

  export type UsersMaxAggregateOutputType = {
    user_id: number | null
    name: string | null
    email: string | null
    passwordHash: string | null
    gender: string | null
    dob: string | null
    phone: string | null
    role: number | null
  }

  export type UsersCountAggregateOutputType = {
    user_id: number
    name: number
    email: number
    passwordHash: number
    gender: number
    dob: number
    phone: number
    role: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    user_id?: true
    role?: true
  }

  export type UsersSumAggregateInputType = {
    user_id?: true
    role?: true
  }

  export type UsersMinAggregateInputType = {
    user_id?: true
    name?: true
    email?: true
    passwordHash?: true
    gender?: true
    dob?: true
    phone?: true
    role?: true
  }

  export type UsersMaxAggregateInputType = {
    user_id?: true
    name?: true
    email?: true
    passwordHash?: true
    gender?: true
    dob?: true
    phone?: true
    role?: true
  }

  export type UsersCountAggregateInputType = {
    user_id?: true
    name?: true
    email?: true
    passwordHash?: true
    gender?: true
    dob?: true
    phone?: true
    role?: true
    _all?: true
  }

  export type UsersAggregateArgs = {
    /**
     * Filter which users to aggregate.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs = {
    where?: usersWhereInput
    orderBy?: Enumerable<usersOrderByWithAggregationInput>
    by: UsersScalarFieldEnum[]
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }


  export type UsersGroupByOutputType = {
    user_id: number
    name: string
    email: string
    passwordHash: string
    gender: string
    dob: string
    phone: string
    role: number
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect = {
    user_id?: boolean
    name?: boolean
    email?: boolean
    passwordHash?: boolean
    gender?: boolean
    dob?: boolean
    phone?: boolean
    role?: boolean
  }


  export type usersGetPayload<S extends boolean | null | undefined | usersArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? users :
    S extends undefined ? never :
    S extends { include: any } & (usersArgs | usersFindManyArgs)
    ? users 
    : S extends { select: any } & (usersArgs | usersFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof users ? users[P] : never
  } 
      : users


  type usersCountArgs = 
    Omit<usersFindManyArgs, 'select' | 'include'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface usersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, usersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'users'> extends True ? Prisma__usersClient<usersGetPayload<T>> : Prisma__usersClient<usersGetPayload<T> | null, null>

    /**
     * Find one Users that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, usersFindUniqueOrThrowArgs>
    ): Prisma__usersClient<usersGetPayload<T>>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, usersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'users'> extends True ? Prisma__usersClient<usersGetPayload<T>> : Prisma__usersClient<usersGetPayload<T> | null, null>

    /**
     * Find the first Users that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs>(
      args?: SelectSubset<T, usersFindFirstOrThrowArgs>
    ): Prisma__usersClient<usersGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const usersWithUser_idOnly = await prisma.users.findMany({ select: { user_id: true } })
     * 
    **/
    findMany<T extends usersFindManyArgs>(
      args?: SelectSubset<T, usersFindManyArgs>
    ): Prisma.PrismaPromise<Array<usersGetPayload<T>>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends usersCreateArgs>(
      args: SelectSubset<T, usersCreateArgs>
    ): Prisma__usersClient<usersGetPayload<T>>

    /**
     * Create many Users.
     *     @param {usersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usersCreateManyArgs>(
      args?: SelectSubset<T, usersCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends usersDeleteArgs>(
      args: SelectSubset<T, usersDeleteArgs>
    ): Prisma__usersClient<usersGetPayload<T>>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usersUpdateArgs>(
      args: SelectSubset<T, usersUpdateArgs>
    ): Prisma__usersClient<usersGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usersDeleteManyArgs>(
      args?: SelectSubset<T, usersDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usersUpdateManyArgs>(
      args: SelectSubset<T, usersUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends usersUpsertArgs>(
      args: SelectSubset<T, usersUpsertArgs>
    ): Prisma__usersClient<usersGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__usersClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * users base type for findUnique actions
   */
  export type usersFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findUnique
   */
  export interface usersFindUniqueArgs extends usersFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users base type for findFirst actions
   */
  export type usersFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: Enumerable<UsersScalarFieldEnum>
  }

  /**
   * users findFirst
   */
  export interface usersFindFirstArgs extends usersFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users findMany
   */
  export type usersFindManyArgs = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users create
   */
  export type usersCreateArgs = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect | null
    /**
     * The data needed to create a users.
     */
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }


  /**
   * users createMany
   */
  export type usersCreateManyArgs = {
    /**
     * The data used to create many users.
     */
    data: Enumerable<usersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * users update
   */
  export type usersUpdateArgs = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect | null
    /**
     * The data needed to update a users.
     */
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users updateMany
   */
  export type usersUpdateManyArgs = {
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
  }


  /**
   * users upsert
   */
  export type usersUpsertArgs = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect | null
    /**
     * The filter to search for the users to update in case it exists.
     */
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     */
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }


  /**
   * users delete
   */
  export type usersDeleteArgs = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect | null
    /**
     * Filter which users to delete.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs = {
    /**
     * Filter which users to delete
     */
    where?: usersWhereInput
  }


  /**
   * users without action
   */
  export type usersArgs = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect | null
  }



  /**
   * Model patient
   */


  export type AggregatePatient = {
    _count: PatientCountAggregateOutputType | null
    _avg: PatientAvgAggregateOutputType | null
    _sum: PatientSumAggregateOutputType | null
    _min: PatientMinAggregateOutputType | null
    _max: PatientMaxAggregateOutputType | null
  }

  export type PatientAvgAggregateOutputType = {
    patient_id: number | null
  }

  export type PatientSumAggregateOutputType = {
    patient_id: number | null
  }

  export type PatientMinAggregateOutputType = {
    patient_id: number | null
    rollno: string | null
    address: string | null
    hostel_details: string | null
  }

  export type PatientMaxAggregateOutputType = {
    patient_id: number | null
    rollno: string | null
    address: string | null
    hostel_details: string | null
  }

  export type PatientCountAggregateOutputType = {
    patient_id: number
    rollno: number
    address: number
    hostel_details: number
    _all: number
  }


  export type PatientAvgAggregateInputType = {
    patient_id?: true
  }

  export type PatientSumAggregateInputType = {
    patient_id?: true
  }

  export type PatientMinAggregateInputType = {
    patient_id?: true
    rollno?: true
    address?: true
    hostel_details?: true
  }

  export type PatientMaxAggregateInputType = {
    patient_id?: true
    rollno?: true
    address?: true
    hostel_details?: true
  }

  export type PatientCountAggregateInputType = {
    patient_id?: true
    rollno?: true
    address?: true
    hostel_details?: true
    _all?: true
  }

  export type PatientAggregateArgs = {
    /**
     * Filter which patient to aggregate.
     */
    where?: patientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of patients to fetch.
     */
    orderBy?: Enumerable<patientOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: patientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned patients
    **/
    _count?: true | PatientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PatientAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PatientSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientMaxAggregateInputType
  }

  export type GetPatientAggregateType<T extends PatientAggregateArgs> = {
        [P in keyof T & keyof AggregatePatient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatient[P]>
      : GetScalarType<T[P], AggregatePatient[P]>
  }




  export type PatientGroupByArgs = {
    where?: patientWhereInput
    orderBy?: Enumerable<patientOrderByWithAggregationInput>
    by: PatientScalarFieldEnum[]
    having?: patientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientCountAggregateInputType | true
    _avg?: PatientAvgAggregateInputType
    _sum?: PatientSumAggregateInputType
    _min?: PatientMinAggregateInputType
    _max?: PatientMaxAggregateInputType
  }


  export type PatientGroupByOutputType = {
    patient_id: number
    rollno: string
    address: string
    hostel_details: string
    _count: PatientCountAggregateOutputType | null
    _avg: PatientAvgAggregateOutputType | null
    _sum: PatientSumAggregateOutputType | null
    _min: PatientMinAggregateOutputType | null
    _max: PatientMaxAggregateOutputType | null
  }

  type GetPatientGroupByPayload<T extends PatientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<PatientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatientGroupByOutputType[P]>
            : GetScalarType<T[P], PatientGroupByOutputType[P]>
        }
      >
    >


  export type patientSelect = {
    patient_id?: boolean
    rollno?: boolean
    address?: boolean
    hostel_details?: boolean
    appointments?: boolean | patient$appointmentsArgs
    medical_certs?: boolean | patient$medical_certsArgs
    _count?: boolean | PatientCountOutputTypeArgs
  }


  export type patientInclude = {
    appointments?: boolean | patient$appointmentsArgs
    medical_certs?: boolean | patient$medical_certsArgs
    _count?: boolean | PatientCountOutputTypeArgs
  }

  export type patientGetPayload<S extends boolean | null | undefined | patientArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? patient :
    S extends undefined ? never :
    S extends { include: any } & (patientArgs | patientFindManyArgs)
    ? patient  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'appointments' ? Array < appointmentGetPayload<S['include'][P]>>  :
        P extends 'medical_certs' ? Array < medical_certificateGetPayload<S['include'][P]>>  :
        P extends '_count' ? PatientCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (patientArgs | patientFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'appointments' ? Array < appointmentGetPayload<S['select'][P]>>  :
        P extends 'medical_certs' ? Array < medical_certificateGetPayload<S['select'][P]>>  :
        P extends '_count' ? PatientCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof patient ? patient[P] : never
  } 
      : patient


  type patientCountArgs = 
    Omit<patientFindManyArgs, 'select' | 'include'> & {
      select?: PatientCountAggregateInputType | true
    }

  export interface patientDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Patient that matches the filter.
     * @param {patientFindUniqueArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends patientFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, patientFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'patient'> extends True ? Prisma__patientClient<patientGetPayload<T>> : Prisma__patientClient<patientGetPayload<T> | null, null>

    /**
     * Find one Patient that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {patientFindUniqueOrThrowArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends patientFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, patientFindUniqueOrThrowArgs>
    ): Prisma__patientClient<patientGetPayload<T>>

    /**
     * Find the first Patient that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {patientFindFirstArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends patientFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, patientFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'patient'> extends True ? Prisma__patientClient<patientGetPayload<T>> : Prisma__patientClient<patientGetPayload<T> | null, null>

    /**
     * Find the first Patient that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {patientFindFirstOrThrowArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends patientFindFirstOrThrowArgs>(
      args?: SelectSubset<T, patientFindFirstOrThrowArgs>
    ): Prisma__patientClient<patientGetPayload<T>>

    /**
     * Find zero or more Patients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {patientFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Patients
     * const patients = await prisma.patient.findMany()
     * 
     * // Get first 10 Patients
     * const patients = await prisma.patient.findMany({ take: 10 })
     * 
     * // Only select the `patient_id`
     * const patientWithPatient_idOnly = await prisma.patient.findMany({ select: { patient_id: true } })
     * 
    **/
    findMany<T extends patientFindManyArgs>(
      args?: SelectSubset<T, patientFindManyArgs>
    ): Prisma.PrismaPromise<Array<patientGetPayload<T>>>

    /**
     * Create a Patient.
     * @param {patientCreateArgs} args - Arguments to create a Patient.
     * @example
     * // Create one Patient
     * const Patient = await prisma.patient.create({
     *   data: {
     *     // ... data to create a Patient
     *   }
     * })
     * 
    **/
    create<T extends patientCreateArgs>(
      args: SelectSubset<T, patientCreateArgs>
    ): Prisma__patientClient<patientGetPayload<T>>

    /**
     * Create many Patients.
     *     @param {patientCreateManyArgs} args - Arguments to create many Patients.
     *     @example
     *     // Create many Patients
     *     const patient = await prisma.patient.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends patientCreateManyArgs>(
      args?: SelectSubset<T, patientCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Patient.
     * @param {patientDeleteArgs} args - Arguments to delete one Patient.
     * @example
     * // Delete one Patient
     * const Patient = await prisma.patient.delete({
     *   where: {
     *     // ... filter to delete one Patient
     *   }
     * })
     * 
    **/
    delete<T extends patientDeleteArgs>(
      args: SelectSubset<T, patientDeleteArgs>
    ): Prisma__patientClient<patientGetPayload<T>>

    /**
     * Update one Patient.
     * @param {patientUpdateArgs} args - Arguments to update one Patient.
     * @example
     * // Update one Patient
     * const patient = await prisma.patient.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends patientUpdateArgs>(
      args: SelectSubset<T, patientUpdateArgs>
    ): Prisma__patientClient<patientGetPayload<T>>

    /**
     * Delete zero or more Patients.
     * @param {patientDeleteManyArgs} args - Arguments to filter Patients to delete.
     * @example
     * // Delete a few Patients
     * const { count } = await prisma.patient.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends patientDeleteManyArgs>(
      args?: SelectSubset<T, patientDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {patientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Patients
     * const patient = await prisma.patient.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends patientUpdateManyArgs>(
      args: SelectSubset<T, patientUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Patient.
     * @param {patientUpsertArgs} args - Arguments to update or create a Patient.
     * @example
     * // Update or create a Patient
     * const patient = await prisma.patient.upsert({
     *   create: {
     *     // ... data to create a Patient
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Patient we want to update
     *   }
     * })
    **/
    upsert<T extends patientUpsertArgs>(
      args: SelectSubset<T, patientUpsertArgs>
    ): Prisma__patientClient<patientGetPayload<T>>

    /**
     * Count the number of Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {patientCountArgs} args - Arguments to filter Patients to count.
     * @example
     * // Count the number of Patients
     * const count = await prisma.patient.count({
     *   where: {
     *     // ... the filter for the Patients we want to count
     *   }
     * })
    **/
    count<T extends patientCountArgs>(
      args?: Subset<T, patientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Patient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientAggregateArgs>(args: Subset<T, PatientAggregateArgs>): Prisma.PrismaPromise<GetPatientAggregateType<T>>

    /**
     * Group by Patient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatientGroupByArgs['orderBy'] }
        : { orderBy?: PatientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for patient.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__patientClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    appointments<T extends patient$appointmentsArgs= {}>(args?: Subset<T, patient$appointmentsArgs>): Prisma.PrismaPromise<Array<appointmentGetPayload<T>>| Null>;

    medical_certs<T extends patient$medical_certsArgs= {}>(args?: Subset<T, patient$medical_certsArgs>): Prisma.PrismaPromise<Array<medical_certificateGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * patient base type for findUnique actions
   */
  export type patientFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the patient
     */
    select?: patientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: patientInclude | null
    /**
     * Filter, which patient to fetch.
     */
    where: patientWhereUniqueInput
  }

  /**
   * patient findUnique
   */
  export interface patientFindUniqueArgs extends patientFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * patient findUniqueOrThrow
   */
  export type patientFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the patient
     */
    select?: patientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: patientInclude | null
    /**
     * Filter, which patient to fetch.
     */
    where: patientWhereUniqueInput
  }


  /**
   * patient base type for findFirst actions
   */
  export type patientFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the patient
     */
    select?: patientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: patientInclude | null
    /**
     * Filter, which patient to fetch.
     */
    where?: patientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of patients to fetch.
     */
    orderBy?: Enumerable<patientOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for patients.
     */
    cursor?: patientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of patients.
     */
    distinct?: Enumerable<PatientScalarFieldEnum>
  }

  /**
   * patient findFirst
   */
  export interface patientFindFirstArgs extends patientFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * patient findFirstOrThrow
   */
  export type patientFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the patient
     */
    select?: patientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: patientInclude | null
    /**
     * Filter, which patient to fetch.
     */
    where?: patientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of patients to fetch.
     */
    orderBy?: Enumerable<patientOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for patients.
     */
    cursor?: patientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of patients.
     */
    distinct?: Enumerable<PatientScalarFieldEnum>
  }


  /**
   * patient findMany
   */
  export type patientFindManyArgs = {
    /**
     * Select specific fields to fetch from the patient
     */
    select?: patientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: patientInclude | null
    /**
     * Filter, which patients to fetch.
     */
    where?: patientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of patients to fetch.
     */
    orderBy?: Enumerable<patientOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing patients.
     */
    cursor?: patientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` patients.
     */
    skip?: number
    distinct?: Enumerable<PatientScalarFieldEnum>
  }


  /**
   * patient create
   */
  export type patientCreateArgs = {
    /**
     * Select specific fields to fetch from the patient
     */
    select?: patientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: patientInclude | null
    /**
     * The data needed to create a patient.
     */
    data: XOR<patientCreateInput, patientUncheckedCreateInput>
  }


  /**
   * patient createMany
   */
  export type patientCreateManyArgs = {
    /**
     * The data used to create many patients.
     */
    data: Enumerable<patientCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * patient update
   */
  export type patientUpdateArgs = {
    /**
     * Select specific fields to fetch from the patient
     */
    select?: patientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: patientInclude | null
    /**
     * The data needed to update a patient.
     */
    data: XOR<patientUpdateInput, patientUncheckedUpdateInput>
    /**
     * Choose, which patient to update.
     */
    where: patientWhereUniqueInput
  }


  /**
   * patient updateMany
   */
  export type patientUpdateManyArgs = {
    /**
     * The data used to update patients.
     */
    data: XOR<patientUpdateManyMutationInput, patientUncheckedUpdateManyInput>
    /**
     * Filter which patients to update
     */
    where?: patientWhereInput
  }


  /**
   * patient upsert
   */
  export type patientUpsertArgs = {
    /**
     * Select specific fields to fetch from the patient
     */
    select?: patientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: patientInclude | null
    /**
     * The filter to search for the patient to update in case it exists.
     */
    where: patientWhereUniqueInput
    /**
     * In case the patient found by the `where` argument doesn't exist, create a new patient with this data.
     */
    create: XOR<patientCreateInput, patientUncheckedCreateInput>
    /**
     * In case the patient was found with the provided `where` argument, update it with this data.
     */
    update: XOR<patientUpdateInput, patientUncheckedUpdateInput>
  }


  /**
   * patient delete
   */
  export type patientDeleteArgs = {
    /**
     * Select specific fields to fetch from the patient
     */
    select?: patientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: patientInclude | null
    /**
     * Filter which patient to delete.
     */
    where: patientWhereUniqueInput
  }


  /**
   * patient deleteMany
   */
  export type patientDeleteManyArgs = {
    /**
     * Filter which patients to delete
     */
    where?: patientWhereInput
  }


  /**
   * patient.appointments
   */
  export type patient$appointmentsArgs = {
    /**
     * Select specific fields to fetch from the appointment
     */
    select?: appointmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: appointmentInclude | null
    where?: appointmentWhereInput
    orderBy?: Enumerable<appointmentOrderByWithRelationInput>
    cursor?: appointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AppointmentScalarFieldEnum>
  }


  /**
   * patient.medical_certs
   */
  export type patient$medical_certsArgs = {
    /**
     * Select specific fields to fetch from the medical_certificate
     */
    select?: medical_certificateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: medical_certificateInclude | null
    where?: medical_certificateWhereInput
    orderBy?: Enumerable<medical_certificateOrderByWithRelationInput>
    cursor?: medical_certificateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Medical_certificateScalarFieldEnum>
  }


  /**
   * patient without action
   */
  export type patientArgs = {
    /**
     * Select specific fields to fetch from the patient
     */
    select?: patientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: patientInclude | null
  }



  /**
   * Model appointment
   */


  export type AggregateAppointment = {
    _count: AppointmentCountAggregateOutputType | null
    _avg: AppointmentAvgAggregateOutputType | null
    _sum: AppointmentSumAggregateOutputType | null
    _min: AppointmentMinAggregateOutputType | null
    _max: AppointmentMaxAggregateOutputType | null
  }

  export type AppointmentAvgAggregateOutputType = {
    app_id: number | null
    patient_id: number | null
  }

  export type AppointmentSumAggregateOutputType = {
    app_id: number | null
    patient_id: number | null
  }

  export type AppointmentMinAggregateOutputType = {
    app_id: number | null
    patient_id: number | null
    reason: string | null
    schedule_time: string | null
    status: STATUS | null
    visited: boolean | null
    reporting_time: string | null
    treatment_name: string | null
    prescription_details: string | null
    advice: string | null
  }

  export type AppointmentMaxAggregateOutputType = {
    app_id: number | null
    patient_id: number | null
    reason: string | null
    schedule_time: string | null
    status: STATUS | null
    visited: boolean | null
    reporting_time: string | null
    treatment_name: string | null
    prescription_details: string | null
    advice: string | null
  }

  export type AppointmentCountAggregateOutputType = {
    app_id: number
    patient_id: number
    reason: number
    schedule_time: number
    status: number
    visited: number
    reporting_time: number
    treatment_name: number
    prescription_details: number
    advice: number
    _all: number
  }


  export type AppointmentAvgAggregateInputType = {
    app_id?: true
    patient_id?: true
  }

  export type AppointmentSumAggregateInputType = {
    app_id?: true
    patient_id?: true
  }

  export type AppointmentMinAggregateInputType = {
    app_id?: true
    patient_id?: true
    reason?: true
    schedule_time?: true
    status?: true
    visited?: true
    reporting_time?: true
    treatment_name?: true
    prescription_details?: true
    advice?: true
  }

  export type AppointmentMaxAggregateInputType = {
    app_id?: true
    patient_id?: true
    reason?: true
    schedule_time?: true
    status?: true
    visited?: true
    reporting_time?: true
    treatment_name?: true
    prescription_details?: true
    advice?: true
  }

  export type AppointmentCountAggregateInputType = {
    app_id?: true
    patient_id?: true
    reason?: true
    schedule_time?: true
    status?: true
    visited?: true
    reporting_time?: true
    treatment_name?: true
    prescription_details?: true
    advice?: true
    _all?: true
  }

  export type AppointmentAggregateArgs = {
    /**
     * Filter which appointment to aggregate.
     */
    where?: appointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of appointments to fetch.
     */
    orderBy?: Enumerable<appointmentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: appointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned appointments
    **/
    _count?: true | AppointmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AppointmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AppointmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AppointmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AppointmentMaxAggregateInputType
  }

  export type GetAppointmentAggregateType<T extends AppointmentAggregateArgs> = {
        [P in keyof T & keyof AggregateAppointment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAppointment[P]>
      : GetScalarType<T[P], AggregateAppointment[P]>
  }




  export type AppointmentGroupByArgs = {
    where?: appointmentWhereInput
    orderBy?: Enumerable<appointmentOrderByWithAggregationInput>
    by: AppointmentScalarFieldEnum[]
    having?: appointmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AppointmentCountAggregateInputType | true
    _avg?: AppointmentAvgAggregateInputType
    _sum?: AppointmentSumAggregateInputType
    _min?: AppointmentMinAggregateInputType
    _max?: AppointmentMaxAggregateInputType
  }


  export type AppointmentGroupByOutputType = {
    app_id: number
    patient_id: number
    reason: string
    schedule_time: string
    status: STATUS | null
    visited: boolean
    reporting_time: string | null
    treatment_name: string | null
    prescription_details: string | null
    advice: string | null
    _count: AppointmentCountAggregateOutputType | null
    _avg: AppointmentAvgAggregateOutputType | null
    _sum: AppointmentSumAggregateOutputType | null
    _min: AppointmentMinAggregateOutputType | null
    _max: AppointmentMaxAggregateOutputType | null
  }

  type GetAppointmentGroupByPayload<T extends AppointmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AppointmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AppointmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AppointmentGroupByOutputType[P]>
            : GetScalarType<T[P], AppointmentGroupByOutputType[P]>
        }
      >
    >


  export type appointmentSelect = {
    app_id?: boolean
    patient_id?: boolean
    reason?: boolean
    schedule_time?: boolean
    status?: boolean
    visited?: boolean
    reporting_time?: boolean
    treatment_name?: boolean
    prescription_details?: boolean
    advice?: boolean
    patient?: boolean | patientArgs
  }


  export type appointmentInclude = {
    patient?: boolean | patientArgs
  }

  export type appointmentGetPayload<S extends boolean | null | undefined | appointmentArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? appointment :
    S extends undefined ? never :
    S extends { include: any } & (appointmentArgs | appointmentFindManyArgs)
    ? appointment  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'patient' ? patientGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (appointmentArgs | appointmentFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'patient' ? patientGetPayload<S['select'][P]> :  P extends keyof appointment ? appointment[P] : never
  } 
      : appointment


  type appointmentCountArgs = 
    Omit<appointmentFindManyArgs, 'select' | 'include'> & {
      select?: AppointmentCountAggregateInputType | true
    }

  export interface appointmentDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Appointment that matches the filter.
     * @param {appointmentFindUniqueArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends appointmentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, appointmentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'appointment'> extends True ? Prisma__appointmentClient<appointmentGetPayload<T>> : Prisma__appointmentClient<appointmentGetPayload<T> | null, null>

    /**
     * Find one Appointment that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {appointmentFindUniqueOrThrowArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends appointmentFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, appointmentFindUniqueOrThrowArgs>
    ): Prisma__appointmentClient<appointmentGetPayload<T>>

    /**
     * Find the first Appointment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {appointmentFindFirstArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends appointmentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, appointmentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'appointment'> extends True ? Prisma__appointmentClient<appointmentGetPayload<T>> : Prisma__appointmentClient<appointmentGetPayload<T> | null, null>

    /**
     * Find the first Appointment that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {appointmentFindFirstOrThrowArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends appointmentFindFirstOrThrowArgs>(
      args?: SelectSubset<T, appointmentFindFirstOrThrowArgs>
    ): Prisma__appointmentClient<appointmentGetPayload<T>>

    /**
     * Find zero or more Appointments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {appointmentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Appointments
     * const appointments = await prisma.appointment.findMany()
     * 
     * // Get first 10 Appointments
     * const appointments = await prisma.appointment.findMany({ take: 10 })
     * 
     * // Only select the `app_id`
     * const appointmentWithApp_idOnly = await prisma.appointment.findMany({ select: { app_id: true } })
     * 
    **/
    findMany<T extends appointmentFindManyArgs>(
      args?: SelectSubset<T, appointmentFindManyArgs>
    ): Prisma.PrismaPromise<Array<appointmentGetPayload<T>>>

    /**
     * Create a Appointment.
     * @param {appointmentCreateArgs} args - Arguments to create a Appointment.
     * @example
     * // Create one Appointment
     * const Appointment = await prisma.appointment.create({
     *   data: {
     *     // ... data to create a Appointment
     *   }
     * })
     * 
    **/
    create<T extends appointmentCreateArgs>(
      args: SelectSubset<T, appointmentCreateArgs>
    ): Prisma__appointmentClient<appointmentGetPayload<T>>

    /**
     * Create many Appointments.
     *     @param {appointmentCreateManyArgs} args - Arguments to create many Appointments.
     *     @example
     *     // Create many Appointments
     *     const appointment = await prisma.appointment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends appointmentCreateManyArgs>(
      args?: SelectSubset<T, appointmentCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Appointment.
     * @param {appointmentDeleteArgs} args - Arguments to delete one Appointment.
     * @example
     * // Delete one Appointment
     * const Appointment = await prisma.appointment.delete({
     *   where: {
     *     // ... filter to delete one Appointment
     *   }
     * })
     * 
    **/
    delete<T extends appointmentDeleteArgs>(
      args: SelectSubset<T, appointmentDeleteArgs>
    ): Prisma__appointmentClient<appointmentGetPayload<T>>

    /**
     * Update one Appointment.
     * @param {appointmentUpdateArgs} args - Arguments to update one Appointment.
     * @example
     * // Update one Appointment
     * const appointment = await prisma.appointment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends appointmentUpdateArgs>(
      args: SelectSubset<T, appointmentUpdateArgs>
    ): Prisma__appointmentClient<appointmentGetPayload<T>>

    /**
     * Delete zero or more Appointments.
     * @param {appointmentDeleteManyArgs} args - Arguments to filter Appointments to delete.
     * @example
     * // Delete a few Appointments
     * const { count } = await prisma.appointment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends appointmentDeleteManyArgs>(
      args?: SelectSubset<T, appointmentDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Appointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {appointmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Appointments
     * const appointment = await prisma.appointment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends appointmentUpdateManyArgs>(
      args: SelectSubset<T, appointmentUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Appointment.
     * @param {appointmentUpsertArgs} args - Arguments to update or create a Appointment.
     * @example
     * // Update or create a Appointment
     * const appointment = await prisma.appointment.upsert({
     *   create: {
     *     // ... data to create a Appointment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Appointment we want to update
     *   }
     * })
    **/
    upsert<T extends appointmentUpsertArgs>(
      args: SelectSubset<T, appointmentUpsertArgs>
    ): Prisma__appointmentClient<appointmentGetPayload<T>>

    /**
     * Count the number of Appointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {appointmentCountArgs} args - Arguments to filter Appointments to count.
     * @example
     * // Count the number of Appointments
     * const count = await prisma.appointment.count({
     *   where: {
     *     // ... the filter for the Appointments we want to count
     *   }
     * })
    **/
    count<T extends appointmentCountArgs>(
      args?: Subset<T, appointmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AppointmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Appointment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AppointmentAggregateArgs>(args: Subset<T, AppointmentAggregateArgs>): Prisma.PrismaPromise<GetAppointmentAggregateType<T>>

    /**
     * Group by Appointment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AppointmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AppointmentGroupByArgs['orderBy'] }
        : { orderBy?: AppointmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AppointmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppointmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for appointment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__appointmentClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    patient<T extends patientArgs= {}>(args?: Subset<T, patientArgs>): Prisma__patientClient<patientGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * appointment base type for findUnique actions
   */
  export type appointmentFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the appointment
     */
    select?: appointmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: appointmentInclude | null
    /**
     * Filter, which appointment to fetch.
     */
    where: appointmentWhereUniqueInput
  }

  /**
   * appointment findUnique
   */
  export interface appointmentFindUniqueArgs extends appointmentFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * appointment findUniqueOrThrow
   */
  export type appointmentFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the appointment
     */
    select?: appointmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: appointmentInclude | null
    /**
     * Filter, which appointment to fetch.
     */
    where: appointmentWhereUniqueInput
  }


  /**
   * appointment base type for findFirst actions
   */
  export type appointmentFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the appointment
     */
    select?: appointmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: appointmentInclude | null
    /**
     * Filter, which appointment to fetch.
     */
    where?: appointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of appointments to fetch.
     */
    orderBy?: Enumerable<appointmentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for appointments.
     */
    cursor?: appointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of appointments.
     */
    distinct?: Enumerable<AppointmentScalarFieldEnum>
  }

  /**
   * appointment findFirst
   */
  export interface appointmentFindFirstArgs extends appointmentFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * appointment findFirstOrThrow
   */
  export type appointmentFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the appointment
     */
    select?: appointmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: appointmentInclude | null
    /**
     * Filter, which appointment to fetch.
     */
    where?: appointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of appointments to fetch.
     */
    orderBy?: Enumerable<appointmentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for appointments.
     */
    cursor?: appointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of appointments.
     */
    distinct?: Enumerable<AppointmentScalarFieldEnum>
  }


  /**
   * appointment findMany
   */
  export type appointmentFindManyArgs = {
    /**
     * Select specific fields to fetch from the appointment
     */
    select?: appointmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: appointmentInclude | null
    /**
     * Filter, which appointments to fetch.
     */
    where?: appointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of appointments to fetch.
     */
    orderBy?: Enumerable<appointmentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing appointments.
     */
    cursor?: appointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` appointments.
     */
    skip?: number
    distinct?: Enumerable<AppointmentScalarFieldEnum>
  }


  /**
   * appointment create
   */
  export type appointmentCreateArgs = {
    /**
     * Select specific fields to fetch from the appointment
     */
    select?: appointmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: appointmentInclude | null
    /**
     * The data needed to create a appointment.
     */
    data: XOR<appointmentCreateInput, appointmentUncheckedCreateInput>
  }


  /**
   * appointment createMany
   */
  export type appointmentCreateManyArgs = {
    /**
     * The data used to create many appointments.
     */
    data: Enumerable<appointmentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * appointment update
   */
  export type appointmentUpdateArgs = {
    /**
     * Select specific fields to fetch from the appointment
     */
    select?: appointmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: appointmentInclude | null
    /**
     * The data needed to update a appointment.
     */
    data: XOR<appointmentUpdateInput, appointmentUncheckedUpdateInput>
    /**
     * Choose, which appointment to update.
     */
    where: appointmentWhereUniqueInput
  }


  /**
   * appointment updateMany
   */
  export type appointmentUpdateManyArgs = {
    /**
     * The data used to update appointments.
     */
    data: XOR<appointmentUpdateManyMutationInput, appointmentUncheckedUpdateManyInput>
    /**
     * Filter which appointments to update
     */
    where?: appointmentWhereInput
  }


  /**
   * appointment upsert
   */
  export type appointmentUpsertArgs = {
    /**
     * Select specific fields to fetch from the appointment
     */
    select?: appointmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: appointmentInclude | null
    /**
     * The filter to search for the appointment to update in case it exists.
     */
    where: appointmentWhereUniqueInput
    /**
     * In case the appointment found by the `where` argument doesn't exist, create a new appointment with this data.
     */
    create: XOR<appointmentCreateInput, appointmentUncheckedCreateInput>
    /**
     * In case the appointment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<appointmentUpdateInput, appointmentUncheckedUpdateInput>
  }


  /**
   * appointment delete
   */
  export type appointmentDeleteArgs = {
    /**
     * Select specific fields to fetch from the appointment
     */
    select?: appointmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: appointmentInclude | null
    /**
     * Filter which appointment to delete.
     */
    where: appointmentWhereUniqueInput
  }


  /**
   * appointment deleteMany
   */
  export type appointmentDeleteManyArgs = {
    /**
     * Filter which appointments to delete
     */
    where?: appointmentWhereInput
  }


  /**
   * appointment without action
   */
  export type appointmentArgs = {
    /**
     * Select specific fields to fetch from the appointment
     */
    select?: appointmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: appointmentInclude | null
  }



  /**
   * Model medical_certificate
   */


  export type AggregateMedical_certificate = {
    _count: Medical_certificateCountAggregateOutputType | null
    _avg: Medical_certificateAvgAggregateOutputType | null
    _sum: Medical_certificateSumAggregateOutputType | null
    _min: Medical_certificateMinAggregateOutputType | null
    _max: Medical_certificateMaxAggregateOutputType | null
  }

  export type Medical_certificateAvgAggregateOutputType = {
    mc_id: number | null
    patient_id: number | null
    app_id: number | null
  }

  export type Medical_certificateSumAggregateOutputType = {
    mc_id: number | null
    patient_id: number | null
    app_id: number | null
  }

  export type Medical_certificateMinAggregateOutputType = {
    mc_id: number | null
    patient_id: number | null
    app_id: number | null
    purpose: string | null
    duration: string | null
    requested_at: string | null
    status: STATUS | null
    approved_at: string | null
    approved_by: string | null
  }

  export type Medical_certificateMaxAggregateOutputType = {
    mc_id: number | null
    patient_id: number | null
    app_id: number | null
    purpose: string | null
    duration: string | null
    requested_at: string | null
    status: STATUS | null
    approved_at: string | null
    approved_by: string | null
  }

  export type Medical_certificateCountAggregateOutputType = {
    mc_id: number
    patient_id: number
    app_id: number
    purpose: number
    duration: number
    requested_at: number
    status: number
    approved_at: number
    approved_by: number
    _all: number
  }


  export type Medical_certificateAvgAggregateInputType = {
    mc_id?: true
    patient_id?: true
    app_id?: true
  }

  export type Medical_certificateSumAggregateInputType = {
    mc_id?: true
    patient_id?: true
    app_id?: true
  }

  export type Medical_certificateMinAggregateInputType = {
    mc_id?: true
    patient_id?: true
    app_id?: true
    purpose?: true
    duration?: true
    requested_at?: true
    status?: true
    approved_at?: true
    approved_by?: true
  }

  export type Medical_certificateMaxAggregateInputType = {
    mc_id?: true
    patient_id?: true
    app_id?: true
    purpose?: true
    duration?: true
    requested_at?: true
    status?: true
    approved_at?: true
    approved_by?: true
  }

  export type Medical_certificateCountAggregateInputType = {
    mc_id?: true
    patient_id?: true
    app_id?: true
    purpose?: true
    duration?: true
    requested_at?: true
    status?: true
    approved_at?: true
    approved_by?: true
    _all?: true
  }

  export type Medical_certificateAggregateArgs = {
    /**
     * Filter which medical_certificate to aggregate.
     */
    where?: medical_certificateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of medical_certificates to fetch.
     */
    orderBy?: Enumerable<medical_certificateOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: medical_certificateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` medical_certificates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` medical_certificates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned medical_certificates
    **/
    _count?: true | Medical_certificateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Medical_certificateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Medical_certificateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Medical_certificateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Medical_certificateMaxAggregateInputType
  }

  export type GetMedical_certificateAggregateType<T extends Medical_certificateAggregateArgs> = {
        [P in keyof T & keyof AggregateMedical_certificate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMedical_certificate[P]>
      : GetScalarType<T[P], AggregateMedical_certificate[P]>
  }




  export type Medical_certificateGroupByArgs = {
    where?: medical_certificateWhereInput
    orderBy?: Enumerable<medical_certificateOrderByWithAggregationInput>
    by: Medical_certificateScalarFieldEnum[]
    having?: medical_certificateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Medical_certificateCountAggregateInputType | true
    _avg?: Medical_certificateAvgAggregateInputType
    _sum?: Medical_certificateSumAggregateInputType
    _min?: Medical_certificateMinAggregateInputType
    _max?: Medical_certificateMaxAggregateInputType
  }


  export type Medical_certificateGroupByOutputType = {
    mc_id: number
    patient_id: number
    app_id: number
    purpose: string
    duration: string
    requested_at: string
    status: STATUS
    approved_at: string | null
    approved_by: string | null
    _count: Medical_certificateCountAggregateOutputType | null
    _avg: Medical_certificateAvgAggregateOutputType | null
    _sum: Medical_certificateSumAggregateOutputType | null
    _min: Medical_certificateMinAggregateOutputType | null
    _max: Medical_certificateMaxAggregateOutputType | null
  }

  type GetMedical_certificateGroupByPayload<T extends Medical_certificateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<Medical_certificateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Medical_certificateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Medical_certificateGroupByOutputType[P]>
            : GetScalarType<T[P], Medical_certificateGroupByOutputType[P]>
        }
      >
    >


  export type medical_certificateSelect = {
    mc_id?: boolean
    patient_id?: boolean
    app_id?: boolean
    purpose?: boolean
    duration?: boolean
    requested_at?: boolean
    status?: boolean
    approved_at?: boolean
    approved_by?: boolean
    patient?: boolean | patientArgs
  }


  export type medical_certificateInclude = {
    patient?: boolean | patientArgs
  }

  export type medical_certificateGetPayload<S extends boolean | null | undefined | medical_certificateArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? medical_certificate :
    S extends undefined ? never :
    S extends { include: any } & (medical_certificateArgs | medical_certificateFindManyArgs)
    ? medical_certificate  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'patient' ? patientGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (medical_certificateArgs | medical_certificateFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'patient' ? patientGetPayload<S['select'][P]> :  P extends keyof medical_certificate ? medical_certificate[P] : never
  } 
      : medical_certificate


  type medical_certificateCountArgs = 
    Omit<medical_certificateFindManyArgs, 'select' | 'include'> & {
      select?: Medical_certificateCountAggregateInputType | true
    }

  export interface medical_certificateDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Medical_certificate that matches the filter.
     * @param {medical_certificateFindUniqueArgs} args - Arguments to find a Medical_certificate
     * @example
     * // Get one Medical_certificate
     * const medical_certificate = await prisma.medical_certificate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends medical_certificateFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, medical_certificateFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'medical_certificate'> extends True ? Prisma__medical_certificateClient<medical_certificateGetPayload<T>> : Prisma__medical_certificateClient<medical_certificateGetPayload<T> | null, null>

    /**
     * Find one Medical_certificate that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {medical_certificateFindUniqueOrThrowArgs} args - Arguments to find a Medical_certificate
     * @example
     * // Get one Medical_certificate
     * const medical_certificate = await prisma.medical_certificate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends medical_certificateFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, medical_certificateFindUniqueOrThrowArgs>
    ): Prisma__medical_certificateClient<medical_certificateGetPayload<T>>

    /**
     * Find the first Medical_certificate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {medical_certificateFindFirstArgs} args - Arguments to find a Medical_certificate
     * @example
     * // Get one Medical_certificate
     * const medical_certificate = await prisma.medical_certificate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends medical_certificateFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, medical_certificateFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'medical_certificate'> extends True ? Prisma__medical_certificateClient<medical_certificateGetPayload<T>> : Prisma__medical_certificateClient<medical_certificateGetPayload<T> | null, null>

    /**
     * Find the first Medical_certificate that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {medical_certificateFindFirstOrThrowArgs} args - Arguments to find a Medical_certificate
     * @example
     * // Get one Medical_certificate
     * const medical_certificate = await prisma.medical_certificate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends medical_certificateFindFirstOrThrowArgs>(
      args?: SelectSubset<T, medical_certificateFindFirstOrThrowArgs>
    ): Prisma__medical_certificateClient<medical_certificateGetPayload<T>>

    /**
     * Find zero or more Medical_certificates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {medical_certificateFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Medical_certificates
     * const medical_certificates = await prisma.medical_certificate.findMany()
     * 
     * // Get first 10 Medical_certificates
     * const medical_certificates = await prisma.medical_certificate.findMany({ take: 10 })
     * 
     * // Only select the `mc_id`
     * const medical_certificateWithMc_idOnly = await prisma.medical_certificate.findMany({ select: { mc_id: true } })
     * 
    **/
    findMany<T extends medical_certificateFindManyArgs>(
      args?: SelectSubset<T, medical_certificateFindManyArgs>
    ): Prisma.PrismaPromise<Array<medical_certificateGetPayload<T>>>

    /**
     * Create a Medical_certificate.
     * @param {medical_certificateCreateArgs} args - Arguments to create a Medical_certificate.
     * @example
     * // Create one Medical_certificate
     * const Medical_certificate = await prisma.medical_certificate.create({
     *   data: {
     *     // ... data to create a Medical_certificate
     *   }
     * })
     * 
    **/
    create<T extends medical_certificateCreateArgs>(
      args: SelectSubset<T, medical_certificateCreateArgs>
    ): Prisma__medical_certificateClient<medical_certificateGetPayload<T>>

    /**
     * Create many Medical_certificates.
     *     @param {medical_certificateCreateManyArgs} args - Arguments to create many Medical_certificates.
     *     @example
     *     // Create many Medical_certificates
     *     const medical_certificate = await prisma.medical_certificate.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends medical_certificateCreateManyArgs>(
      args?: SelectSubset<T, medical_certificateCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Medical_certificate.
     * @param {medical_certificateDeleteArgs} args - Arguments to delete one Medical_certificate.
     * @example
     * // Delete one Medical_certificate
     * const Medical_certificate = await prisma.medical_certificate.delete({
     *   where: {
     *     // ... filter to delete one Medical_certificate
     *   }
     * })
     * 
    **/
    delete<T extends medical_certificateDeleteArgs>(
      args: SelectSubset<T, medical_certificateDeleteArgs>
    ): Prisma__medical_certificateClient<medical_certificateGetPayload<T>>

    /**
     * Update one Medical_certificate.
     * @param {medical_certificateUpdateArgs} args - Arguments to update one Medical_certificate.
     * @example
     * // Update one Medical_certificate
     * const medical_certificate = await prisma.medical_certificate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends medical_certificateUpdateArgs>(
      args: SelectSubset<T, medical_certificateUpdateArgs>
    ): Prisma__medical_certificateClient<medical_certificateGetPayload<T>>

    /**
     * Delete zero or more Medical_certificates.
     * @param {medical_certificateDeleteManyArgs} args - Arguments to filter Medical_certificates to delete.
     * @example
     * // Delete a few Medical_certificates
     * const { count } = await prisma.medical_certificate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends medical_certificateDeleteManyArgs>(
      args?: SelectSubset<T, medical_certificateDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Medical_certificates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {medical_certificateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Medical_certificates
     * const medical_certificate = await prisma.medical_certificate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends medical_certificateUpdateManyArgs>(
      args: SelectSubset<T, medical_certificateUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Medical_certificate.
     * @param {medical_certificateUpsertArgs} args - Arguments to update or create a Medical_certificate.
     * @example
     * // Update or create a Medical_certificate
     * const medical_certificate = await prisma.medical_certificate.upsert({
     *   create: {
     *     // ... data to create a Medical_certificate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Medical_certificate we want to update
     *   }
     * })
    **/
    upsert<T extends medical_certificateUpsertArgs>(
      args: SelectSubset<T, medical_certificateUpsertArgs>
    ): Prisma__medical_certificateClient<medical_certificateGetPayload<T>>

    /**
     * Count the number of Medical_certificates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {medical_certificateCountArgs} args - Arguments to filter Medical_certificates to count.
     * @example
     * // Count the number of Medical_certificates
     * const count = await prisma.medical_certificate.count({
     *   where: {
     *     // ... the filter for the Medical_certificates we want to count
     *   }
     * })
    **/
    count<T extends medical_certificateCountArgs>(
      args?: Subset<T, medical_certificateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Medical_certificateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Medical_certificate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Medical_certificateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Medical_certificateAggregateArgs>(args: Subset<T, Medical_certificateAggregateArgs>): Prisma.PrismaPromise<GetMedical_certificateAggregateType<T>>

    /**
     * Group by Medical_certificate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Medical_certificateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Medical_certificateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Medical_certificateGroupByArgs['orderBy'] }
        : { orderBy?: Medical_certificateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Medical_certificateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMedical_certificateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for medical_certificate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__medical_certificateClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    patient<T extends patientArgs= {}>(args?: Subset<T, patientArgs>): Prisma__patientClient<patientGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * medical_certificate base type for findUnique actions
   */
  export type medical_certificateFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the medical_certificate
     */
    select?: medical_certificateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: medical_certificateInclude | null
    /**
     * Filter, which medical_certificate to fetch.
     */
    where: medical_certificateWhereUniqueInput
  }

  /**
   * medical_certificate findUnique
   */
  export interface medical_certificateFindUniqueArgs extends medical_certificateFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * medical_certificate findUniqueOrThrow
   */
  export type medical_certificateFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the medical_certificate
     */
    select?: medical_certificateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: medical_certificateInclude | null
    /**
     * Filter, which medical_certificate to fetch.
     */
    where: medical_certificateWhereUniqueInput
  }


  /**
   * medical_certificate base type for findFirst actions
   */
  export type medical_certificateFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the medical_certificate
     */
    select?: medical_certificateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: medical_certificateInclude | null
    /**
     * Filter, which medical_certificate to fetch.
     */
    where?: medical_certificateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of medical_certificates to fetch.
     */
    orderBy?: Enumerable<medical_certificateOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for medical_certificates.
     */
    cursor?: medical_certificateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` medical_certificates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` medical_certificates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of medical_certificates.
     */
    distinct?: Enumerable<Medical_certificateScalarFieldEnum>
  }

  /**
   * medical_certificate findFirst
   */
  export interface medical_certificateFindFirstArgs extends medical_certificateFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * medical_certificate findFirstOrThrow
   */
  export type medical_certificateFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the medical_certificate
     */
    select?: medical_certificateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: medical_certificateInclude | null
    /**
     * Filter, which medical_certificate to fetch.
     */
    where?: medical_certificateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of medical_certificates to fetch.
     */
    orderBy?: Enumerable<medical_certificateOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for medical_certificates.
     */
    cursor?: medical_certificateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` medical_certificates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` medical_certificates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of medical_certificates.
     */
    distinct?: Enumerable<Medical_certificateScalarFieldEnum>
  }


  /**
   * medical_certificate findMany
   */
  export type medical_certificateFindManyArgs = {
    /**
     * Select specific fields to fetch from the medical_certificate
     */
    select?: medical_certificateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: medical_certificateInclude | null
    /**
     * Filter, which medical_certificates to fetch.
     */
    where?: medical_certificateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of medical_certificates to fetch.
     */
    orderBy?: Enumerable<medical_certificateOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing medical_certificates.
     */
    cursor?: medical_certificateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` medical_certificates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` medical_certificates.
     */
    skip?: number
    distinct?: Enumerable<Medical_certificateScalarFieldEnum>
  }


  /**
   * medical_certificate create
   */
  export type medical_certificateCreateArgs = {
    /**
     * Select specific fields to fetch from the medical_certificate
     */
    select?: medical_certificateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: medical_certificateInclude | null
    /**
     * The data needed to create a medical_certificate.
     */
    data: XOR<medical_certificateCreateInput, medical_certificateUncheckedCreateInput>
  }


  /**
   * medical_certificate createMany
   */
  export type medical_certificateCreateManyArgs = {
    /**
     * The data used to create many medical_certificates.
     */
    data: Enumerable<medical_certificateCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * medical_certificate update
   */
  export type medical_certificateUpdateArgs = {
    /**
     * Select specific fields to fetch from the medical_certificate
     */
    select?: medical_certificateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: medical_certificateInclude | null
    /**
     * The data needed to update a medical_certificate.
     */
    data: XOR<medical_certificateUpdateInput, medical_certificateUncheckedUpdateInput>
    /**
     * Choose, which medical_certificate to update.
     */
    where: medical_certificateWhereUniqueInput
  }


  /**
   * medical_certificate updateMany
   */
  export type medical_certificateUpdateManyArgs = {
    /**
     * The data used to update medical_certificates.
     */
    data: XOR<medical_certificateUpdateManyMutationInput, medical_certificateUncheckedUpdateManyInput>
    /**
     * Filter which medical_certificates to update
     */
    where?: medical_certificateWhereInput
  }


  /**
   * medical_certificate upsert
   */
  export type medical_certificateUpsertArgs = {
    /**
     * Select specific fields to fetch from the medical_certificate
     */
    select?: medical_certificateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: medical_certificateInclude | null
    /**
     * The filter to search for the medical_certificate to update in case it exists.
     */
    where: medical_certificateWhereUniqueInput
    /**
     * In case the medical_certificate found by the `where` argument doesn't exist, create a new medical_certificate with this data.
     */
    create: XOR<medical_certificateCreateInput, medical_certificateUncheckedCreateInput>
    /**
     * In case the medical_certificate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<medical_certificateUpdateInput, medical_certificateUncheckedUpdateInput>
  }


  /**
   * medical_certificate delete
   */
  export type medical_certificateDeleteArgs = {
    /**
     * Select specific fields to fetch from the medical_certificate
     */
    select?: medical_certificateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: medical_certificateInclude | null
    /**
     * Filter which medical_certificate to delete.
     */
    where: medical_certificateWhereUniqueInput
  }


  /**
   * medical_certificate deleteMany
   */
  export type medical_certificateDeleteManyArgs = {
    /**
     * Filter which medical_certificates to delete
     */
    where?: medical_certificateWhereInput
  }


  /**
   * medical_certificate without action
   */
  export type medical_certificateArgs = {
    /**
     * Select specific fields to fetch from the medical_certificate
     */
    select?: medical_certificateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: medical_certificateInclude | null
  }



  /**
   * Model sessions
   */


  export type AggregateSessions = {
    _count: SessionsCountAggregateOutputType | null
    _min: SessionsMinAggregateOutputType | null
    _max: SessionsMaxAggregateOutputType | null
  }

  export type SessionsMinAggregateOutputType = {
    email: string | null
    token: string | null
    generated_at: Date | null
  }

  export type SessionsMaxAggregateOutputType = {
    email: string | null
    token: string | null
    generated_at: Date | null
  }

  export type SessionsCountAggregateOutputType = {
    email: number
    token: number
    generated_at: number
    _all: number
  }


  export type SessionsMinAggregateInputType = {
    email?: true
    token?: true
    generated_at?: true
  }

  export type SessionsMaxAggregateInputType = {
    email?: true
    token?: true
    generated_at?: true
  }

  export type SessionsCountAggregateInputType = {
    email?: true
    token?: true
    generated_at?: true
    _all?: true
  }

  export type SessionsAggregateArgs = {
    /**
     * Filter which sessions to aggregate.
     */
    where?: sessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sessions to fetch.
     */
    orderBy?: Enumerable<sessionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: sessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned sessions
    **/
    _count?: true | SessionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionsMaxAggregateInputType
  }

  export type GetSessionsAggregateType<T extends SessionsAggregateArgs> = {
        [P in keyof T & keyof AggregateSessions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSessions[P]>
      : GetScalarType<T[P], AggregateSessions[P]>
  }




  export type SessionsGroupByArgs = {
    where?: sessionsWhereInput
    orderBy?: Enumerable<sessionsOrderByWithAggregationInput>
    by: SessionsScalarFieldEnum[]
    having?: sessionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionsCountAggregateInputType | true
    _min?: SessionsMinAggregateInputType
    _max?: SessionsMaxAggregateInputType
  }


  export type SessionsGroupByOutputType = {
    email: string
    token: string
    generated_at: Date
    _count: SessionsCountAggregateOutputType | null
    _min: SessionsMinAggregateOutputType | null
    _max: SessionsMaxAggregateOutputType | null
  }

  type GetSessionsGroupByPayload<T extends SessionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SessionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionsGroupByOutputType[P]>
            : GetScalarType<T[P], SessionsGroupByOutputType[P]>
        }
      >
    >


  export type sessionsSelect = {
    email?: boolean
    token?: boolean
    generated_at?: boolean
  }


  export type sessionsGetPayload<S extends boolean | null | undefined | sessionsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? sessions :
    S extends undefined ? never :
    S extends { include: any } & (sessionsArgs | sessionsFindManyArgs)
    ? sessions 
    : S extends { select: any } & (sessionsArgs | sessionsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof sessions ? sessions[P] : never
  } 
      : sessions


  type sessionsCountArgs = 
    Omit<sessionsFindManyArgs, 'select' | 'include'> & {
      select?: SessionsCountAggregateInputType | true
    }

  export interface sessionsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Sessions that matches the filter.
     * @param {sessionsFindUniqueArgs} args - Arguments to find a Sessions
     * @example
     * // Get one Sessions
     * const sessions = await prisma.sessions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends sessionsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, sessionsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'sessions'> extends True ? Prisma__sessionsClient<sessionsGetPayload<T>> : Prisma__sessionsClient<sessionsGetPayload<T> | null, null>

    /**
     * Find one Sessions that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {sessionsFindUniqueOrThrowArgs} args - Arguments to find a Sessions
     * @example
     * // Get one Sessions
     * const sessions = await prisma.sessions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends sessionsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, sessionsFindUniqueOrThrowArgs>
    ): Prisma__sessionsClient<sessionsGetPayload<T>>

    /**
     * Find the first Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sessionsFindFirstArgs} args - Arguments to find a Sessions
     * @example
     * // Get one Sessions
     * const sessions = await prisma.sessions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends sessionsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, sessionsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'sessions'> extends True ? Prisma__sessionsClient<sessionsGetPayload<T>> : Prisma__sessionsClient<sessionsGetPayload<T> | null, null>

    /**
     * Find the first Sessions that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sessionsFindFirstOrThrowArgs} args - Arguments to find a Sessions
     * @example
     * // Get one Sessions
     * const sessions = await prisma.sessions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends sessionsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, sessionsFindFirstOrThrowArgs>
    ): Prisma__sessionsClient<sessionsGetPayload<T>>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sessionsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.sessions.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.sessions.findMany({ take: 10 })
     * 
     * // Only select the `email`
     * const sessionsWithEmailOnly = await prisma.sessions.findMany({ select: { email: true } })
     * 
    **/
    findMany<T extends sessionsFindManyArgs>(
      args?: SelectSubset<T, sessionsFindManyArgs>
    ): Prisma.PrismaPromise<Array<sessionsGetPayload<T>>>

    /**
     * Create a Sessions.
     * @param {sessionsCreateArgs} args - Arguments to create a Sessions.
     * @example
     * // Create one Sessions
     * const Sessions = await prisma.sessions.create({
     *   data: {
     *     // ... data to create a Sessions
     *   }
     * })
     * 
    **/
    create<T extends sessionsCreateArgs>(
      args: SelectSubset<T, sessionsCreateArgs>
    ): Prisma__sessionsClient<sessionsGetPayload<T>>

    /**
     * Create many Sessions.
     *     @param {sessionsCreateManyArgs} args - Arguments to create many Sessions.
     *     @example
     *     // Create many Sessions
     *     const sessions = await prisma.sessions.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends sessionsCreateManyArgs>(
      args?: SelectSubset<T, sessionsCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Sessions.
     * @param {sessionsDeleteArgs} args - Arguments to delete one Sessions.
     * @example
     * // Delete one Sessions
     * const Sessions = await prisma.sessions.delete({
     *   where: {
     *     // ... filter to delete one Sessions
     *   }
     * })
     * 
    **/
    delete<T extends sessionsDeleteArgs>(
      args: SelectSubset<T, sessionsDeleteArgs>
    ): Prisma__sessionsClient<sessionsGetPayload<T>>

    /**
     * Update one Sessions.
     * @param {sessionsUpdateArgs} args - Arguments to update one Sessions.
     * @example
     * // Update one Sessions
     * const sessions = await prisma.sessions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends sessionsUpdateArgs>(
      args: SelectSubset<T, sessionsUpdateArgs>
    ): Prisma__sessionsClient<sessionsGetPayload<T>>

    /**
     * Delete zero or more Sessions.
     * @param {sessionsDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.sessions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends sessionsDeleteManyArgs>(
      args?: SelectSubset<T, sessionsDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sessionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const sessions = await prisma.sessions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends sessionsUpdateManyArgs>(
      args: SelectSubset<T, sessionsUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Sessions.
     * @param {sessionsUpsertArgs} args - Arguments to update or create a Sessions.
     * @example
     * // Update or create a Sessions
     * const sessions = await prisma.sessions.upsert({
     *   create: {
     *     // ... data to create a Sessions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sessions we want to update
     *   }
     * })
    **/
    upsert<T extends sessionsUpsertArgs>(
      args: SelectSubset<T, sessionsUpsertArgs>
    ): Prisma__sessionsClient<sessionsGetPayload<T>>

    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sessionsCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.sessions.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends sessionsCountArgs>(
      args?: Subset<T, sessionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionsAggregateArgs>(args: Subset<T, SessionsAggregateArgs>): Prisma.PrismaPromise<GetSessionsAggregateType<T>>

    /**
     * Group by Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionsGroupByArgs['orderBy'] }
        : { orderBy?: SessionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for sessions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__sessionsClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * sessions base type for findUnique actions
   */
  export type sessionsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the sessions
     */
    select?: sessionsSelect | null
    /**
     * Filter, which sessions to fetch.
     */
    where: sessionsWhereUniqueInput
  }

  /**
   * sessions findUnique
   */
  export interface sessionsFindUniqueArgs extends sessionsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * sessions findUniqueOrThrow
   */
  export type sessionsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the sessions
     */
    select?: sessionsSelect | null
    /**
     * Filter, which sessions to fetch.
     */
    where: sessionsWhereUniqueInput
  }


  /**
   * sessions base type for findFirst actions
   */
  export type sessionsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the sessions
     */
    select?: sessionsSelect | null
    /**
     * Filter, which sessions to fetch.
     */
    where?: sessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sessions to fetch.
     */
    orderBy?: Enumerable<sessionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sessions.
     */
    cursor?: sessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sessions.
     */
    distinct?: Enumerable<SessionsScalarFieldEnum>
  }

  /**
   * sessions findFirst
   */
  export interface sessionsFindFirstArgs extends sessionsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * sessions findFirstOrThrow
   */
  export type sessionsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the sessions
     */
    select?: sessionsSelect | null
    /**
     * Filter, which sessions to fetch.
     */
    where?: sessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sessions to fetch.
     */
    orderBy?: Enumerable<sessionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sessions.
     */
    cursor?: sessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sessions.
     */
    distinct?: Enumerable<SessionsScalarFieldEnum>
  }


  /**
   * sessions findMany
   */
  export type sessionsFindManyArgs = {
    /**
     * Select specific fields to fetch from the sessions
     */
    select?: sessionsSelect | null
    /**
     * Filter, which sessions to fetch.
     */
    where?: sessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sessions to fetch.
     */
    orderBy?: Enumerable<sessionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing sessions.
     */
    cursor?: sessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sessions.
     */
    skip?: number
    distinct?: Enumerable<SessionsScalarFieldEnum>
  }


  /**
   * sessions create
   */
  export type sessionsCreateArgs = {
    /**
     * Select specific fields to fetch from the sessions
     */
    select?: sessionsSelect | null
    /**
     * The data needed to create a sessions.
     */
    data: XOR<sessionsCreateInput, sessionsUncheckedCreateInput>
  }


  /**
   * sessions createMany
   */
  export type sessionsCreateManyArgs = {
    /**
     * The data used to create many sessions.
     */
    data: Enumerable<sessionsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * sessions update
   */
  export type sessionsUpdateArgs = {
    /**
     * Select specific fields to fetch from the sessions
     */
    select?: sessionsSelect | null
    /**
     * The data needed to update a sessions.
     */
    data: XOR<sessionsUpdateInput, sessionsUncheckedUpdateInput>
    /**
     * Choose, which sessions to update.
     */
    where: sessionsWhereUniqueInput
  }


  /**
   * sessions updateMany
   */
  export type sessionsUpdateManyArgs = {
    /**
     * The data used to update sessions.
     */
    data: XOR<sessionsUpdateManyMutationInput, sessionsUncheckedUpdateManyInput>
    /**
     * Filter which sessions to update
     */
    where?: sessionsWhereInput
  }


  /**
   * sessions upsert
   */
  export type sessionsUpsertArgs = {
    /**
     * Select specific fields to fetch from the sessions
     */
    select?: sessionsSelect | null
    /**
     * The filter to search for the sessions to update in case it exists.
     */
    where: sessionsWhereUniqueInput
    /**
     * In case the sessions found by the `where` argument doesn't exist, create a new sessions with this data.
     */
    create: XOR<sessionsCreateInput, sessionsUncheckedCreateInput>
    /**
     * In case the sessions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<sessionsUpdateInput, sessionsUncheckedUpdateInput>
  }


  /**
   * sessions delete
   */
  export type sessionsDeleteArgs = {
    /**
     * Select specific fields to fetch from the sessions
     */
    select?: sessionsSelect | null
    /**
     * Filter which sessions to delete.
     */
    where: sessionsWhereUniqueInput
  }


  /**
   * sessions deleteMany
   */
  export type sessionsDeleteManyArgs = {
    /**
     * Filter which sessions to delete
     */
    where?: sessionsWhereInput
  }


  /**
   * sessions without action
   */
  export type sessionsArgs = {
    /**
     * Select specific fields to fetch from the sessions
     */
    select?: sessionsSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const AppointmentScalarFieldEnum: {
    app_id: 'app_id',
    patient_id: 'patient_id',
    reason: 'reason',
    schedule_time: 'schedule_time',
    status: 'status',
    visited: 'visited',
    reporting_time: 'reporting_time',
    treatment_name: 'treatment_name',
    prescription_details: 'prescription_details',
    advice: 'advice'
  };

  export type AppointmentScalarFieldEnum = (typeof AppointmentScalarFieldEnum)[keyof typeof AppointmentScalarFieldEnum]


  export const Medical_certificateScalarFieldEnum: {
    mc_id: 'mc_id',
    patient_id: 'patient_id',
    app_id: 'app_id',
    purpose: 'purpose',
    duration: 'duration',
    requested_at: 'requested_at',
    status: 'status',
    approved_at: 'approved_at',
    approved_by: 'approved_by'
  };

  export type Medical_certificateScalarFieldEnum = (typeof Medical_certificateScalarFieldEnum)[keyof typeof Medical_certificateScalarFieldEnum]


  export const PatientScalarFieldEnum: {
    patient_id: 'patient_id',
    rollno: 'rollno',
    address: 'address',
    hostel_details: 'hostel_details'
  };

  export type PatientScalarFieldEnum = (typeof PatientScalarFieldEnum)[keyof typeof PatientScalarFieldEnum]


  export const SessionsScalarFieldEnum: {
    email: 'email',
    token: 'token',
    generated_at: 'generated_at'
  };

  export type SessionsScalarFieldEnum = (typeof SessionsScalarFieldEnum)[keyof typeof SessionsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    user_id: 'user_id',
    name: 'name',
    email: 'email',
    passwordHash: 'passwordHash',
    gender: 'gender',
    dob: 'dob',
    phone: 'phone',
    role: 'role'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type usersWhereInput = {
    AND?: Enumerable<usersWhereInput>
    OR?: Enumerable<usersWhereInput>
    NOT?: Enumerable<usersWhereInput>
    user_id?: IntFilter | number
    name?: StringFilter | string
    email?: StringFilter | string
    passwordHash?: StringFilter | string
    gender?: StringFilter | string
    dob?: StringFilter | string
    phone?: StringFilter | string
    role?: IntFilter | number
  }

  export type usersOrderByWithRelationInput = {
    user_id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    gender?: SortOrder
    dob?: SortOrder
    phone?: SortOrder
    role?: SortOrder
  }

  export type usersWhereUniqueInput = {
    user_id?: number
    email?: string
  }

  export type usersOrderByWithAggregationInput = {
    user_id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    gender?: SortOrder
    dob?: SortOrder
    phone?: SortOrder
    role?: SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<usersScalarWhereWithAggregatesInput>
    OR?: Enumerable<usersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<usersScalarWhereWithAggregatesInput>
    user_id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    passwordHash?: StringWithAggregatesFilter | string
    gender?: StringWithAggregatesFilter | string
    dob?: StringWithAggregatesFilter | string
    phone?: StringWithAggregatesFilter | string
    role?: IntWithAggregatesFilter | number
  }

  export type patientWhereInput = {
    AND?: Enumerable<patientWhereInput>
    OR?: Enumerable<patientWhereInput>
    NOT?: Enumerable<patientWhereInput>
    patient_id?: IntFilter | number
    rollno?: StringFilter | string
    address?: StringFilter | string
    hostel_details?: StringFilter | string
    appointments?: AppointmentListRelationFilter
    medical_certs?: Medical_certificateListRelationFilter
  }

  export type patientOrderByWithRelationInput = {
    patient_id?: SortOrder
    rollno?: SortOrder
    address?: SortOrder
    hostel_details?: SortOrder
    appointments?: appointmentOrderByRelationAggregateInput
    medical_certs?: medical_certificateOrderByRelationAggregateInput
  }

  export type patientWhereUniqueInput = {
    patient_id?: number
    rollno?: string
  }

  export type patientOrderByWithAggregationInput = {
    patient_id?: SortOrder
    rollno?: SortOrder
    address?: SortOrder
    hostel_details?: SortOrder
    _count?: patientCountOrderByAggregateInput
    _avg?: patientAvgOrderByAggregateInput
    _max?: patientMaxOrderByAggregateInput
    _min?: patientMinOrderByAggregateInput
    _sum?: patientSumOrderByAggregateInput
  }

  export type patientScalarWhereWithAggregatesInput = {
    AND?: Enumerable<patientScalarWhereWithAggregatesInput>
    OR?: Enumerable<patientScalarWhereWithAggregatesInput>
    NOT?: Enumerable<patientScalarWhereWithAggregatesInput>
    patient_id?: IntWithAggregatesFilter | number
    rollno?: StringWithAggregatesFilter | string
    address?: StringWithAggregatesFilter | string
    hostel_details?: StringWithAggregatesFilter | string
  }

  export type appointmentWhereInput = {
    AND?: Enumerable<appointmentWhereInput>
    OR?: Enumerable<appointmentWhereInput>
    NOT?: Enumerable<appointmentWhereInput>
    app_id?: IntFilter | number
    patient_id?: IntFilter | number
    reason?: StringFilter | string
    schedule_time?: StringFilter | string
    status?: EnumSTATUSNullableFilter | STATUS | null
    visited?: BoolFilter | boolean
    reporting_time?: StringNullableFilter | string | null
    treatment_name?: StringNullableFilter | string | null
    prescription_details?: StringNullableFilter | string | null
    advice?: StringNullableFilter | string | null
    patient?: XOR<PatientRelationFilter, patientWhereInput>
  }

  export type appointmentOrderByWithRelationInput = {
    app_id?: SortOrder
    patient_id?: SortOrder
    reason?: SortOrder
    schedule_time?: SortOrder
    status?: SortOrder
    visited?: SortOrder
    reporting_time?: SortOrder
    treatment_name?: SortOrder
    prescription_details?: SortOrder
    advice?: SortOrder
    patient?: patientOrderByWithRelationInput
  }

  export type appointmentWhereUniqueInput = {
    app_id?: number
  }

  export type appointmentOrderByWithAggregationInput = {
    app_id?: SortOrder
    patient_id?: SortOrder
    reason?: SortOrder
    schedule_time?: SortOrder
    status?: SortOrder
    visited?: SortOrder
    reporting_time?: SortOrder
    treatment_name?: SortOrder
    prescription_details?: SortOrder
    advice?: SortOrder
    _count?: appointmentCountOrderByAggregateInput
    _avg?: appointmentAvgOrderByAggregateInput
    _max?: appointmentMaxOrderByAggregateInput
    _min?: appointmentMinOrderByAggregateInput
    _sum?: appointmentSumOrderByAggregateInput
  }

  export type appointmentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<appointmentScalarWhereWithAggregatesInput>
    OR?: Enumerable<appointmentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<appointmentScalarWhereWithAggregatesInput>
    app_id?: IntWithAggregatesFilter | number
    patient_id?: IntWithAggregatesFilter | number
    reason?: StringWithAggregatesFilter | string
    schedule_time?: StringWithAggregatesFilter | string
    status?: EnumSTATUSNullableWithAggregatesFilter | STATUS | null
    visited?: BoolWithAggregatesFilter | boolean
    reporting_time?: StringNullableWithAggregatesFilter | string | null
    treatment_name?: StringNullableWithAggregatesFilter | string | null
    prescription_details?: StringNullableWithAggregatesFilter | string | null
    advice?: StringNullableWithAggregatesFilter | string | null
  }

  export type medical_certificateWhereInput = {
    AND?: Enumerable<medical_certificateWhereInput>
    OR?: Enumerable<medical_certificateWhereInput>
    NOT?: Enumerable<medical_certificateWhereInput>
    mc_id?: IntFilter | number
    patient_id?: IntFilter | number
    app_id?: IntFilter | number
    purpose?: StringFilter | string
    duration?: StringFilter | string
    requested_at?: StringFilter | string
    status?: EnumSTATUSFilter | STATUS
    approved_at?: StringNullableFilter | string | null
    approved_by?: StringNullableFilter | string | null
    patient?: XOR<PatientRelationFilter, patientWhereInput>
  }

  export type medical_certificateOrderByWithRelationInput = {
    mc_id?: SortOrder
    patient_id?: SortOrder
    app_id?: SortOrder
    purpose?: SortOrder
    duration?: SortOrder
    requested_at?: SortOrder
    status?: SortOrder
    approved_at?: SortOrder
    approved_by?: SortOrder
    patient?: patientOrderByWithRelationInput
  }

  export type medical_certificateWhereUniqueInput = {
    mc_id?: number
    app_id?: number
  }

  export type medical_certificateOrderByWithAggregationInput = {
    mc_id?: SortOrder
    patient_id?: SortOrder
    app_id?: SortOrder
    purpose?: SortOrder
    duration?: SortOrder
    requested_at?: SortOrder
    status?: SortOrder
    approved_at?: SortOrder
    approved_by?: SortOrder
    _count?: medical_certificateCountOrderByAggregateInput
    _avg?: medical_certificateAvgOrderByAggregateInput
    _max?: medical_certificateMaxOrderByAggregateInput
    _min?: medical_certificateMinOrderByAggregateInput
    _sum?: medical_certificateSumOrderByAggregateInput
  }

  export type medical_certificateScalarWhereWithAggregatesInput = {
    AND?: Enumerable<medical_certificateScalarWhereWithAggregatesInput>
    OR?: Enumerable<medical_certificateScalarWhereWithAggregatesInput>
    NOT?: Enumerable<medical_certificateScalarWhereWithAggregatesInput>
    mc_id?: IntWithAggregatesFilter | number
    patient_id?: IntWithAggregatesFilter | number
    app_id?: IntWithAggregatesFilter | number
    purpose?: StringWithAggregatesFilter | string
    duration?: StringWithAggregatesFilter | string
    requested_at?: StringWithAggregatesFilter | string
    status?: EnumSTATUSWithAggregatesFilter | STATUS
    approved_at?: StringNullableWithAggregatesFilter | string | null
    approved_by?: StringNullableWithAggregatesFilter | string | null
  }

  export type sessionsWhereInput = {
    AND?: Enumerable<sessionsWhereInput>
    OR?: Enumerable<sessionsWhereInput>
    NOT?: Enumerable<sessionsWhereInput>
    email?: StringFilter | string
    token?: StringFilter | string
    generated_at?: DateTimeFilter | Date | string
  }

  export type sessionsOrderByWithRelationInput = {
    email?: SortOrder
    token?: SortOrder
    generated_at?: SortOrder
  }

  export type sessionsWhereUniqueInput = {
    email?: string
    token?: string
  }

  export type sessionsOrderByWithAggregationInput = {
    email?: SortOrder
    token?: SortOrder
    generated_at?: SortOrder
    _count?: sessionsCountOrderByAggregateInput
    _max?: sessionsMaxOrderByAggregateInput
    _min?: sessionsMinOrderByAggregateInput
  }

  export type sessionsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<sessionsScalarWhereWithAggregatesInput>
    OR?: Enumerable<sessionsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<sessionsScalarWhereWithAggregatesInput>
    email?: StringWithAggregatesFilter | string
    token?: StringWithAggregatesFilter | string
    generated_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type usersCreateInput = {
    name: string
    email: string
    passwordHash: string
    gender: string
    dob: string
    phone: string
    role: number
  }

  export type usersUncheckedCreateInput = {
    user_id?: number
    name: string
    email: string
    passwordHash: string
    gender: string
    dob: string
    phone: string
    role: number
  }

  export type usersUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    dob?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    role?: IntFieldUpdateOperationsInput | number
  }

  export type usersUncheckedUpdateInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    dob?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    role?: IntFieldUpdateOperationsInput | number
  }

  export type usersCreateManyInput = {
    user_id?: number
    name: string
    email: string
    passwordHash: string
    gender: string
    dob: string
    phone: string
    role: number
  }

  export type usersUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    dob?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    role?: IntFieldUpdateOperationsInput | number
  }

  export type usersUncheckedUpdateManyInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    dob?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    role?: IntFieldUpdateOperationsInput | number
  }

  export type patientCreateInput = {
    patient_id: number
    rollno: string
    address: string
    hostel_details: string
    appointments?: appointmentCreateNestedManyWithoutPatientInput
    medical_certs?: medical_certificateCreateNestedManyWithoutPatientInput
  }

  export type patientUncheckedCreateInput = {
    patient_id: number
    rollno: string
    address: string
    hostel_details: string
    appointments?: appointmentUncheckedCreateNestedManyWithoutPatientInput
    medical_certs?: medical_certificateUncheckedCreateNestedManyWithoutPatientInput
  }

  export type patientUpdateInput = {
    patient_id?: IntFieldUpdateOperationsInput | number
    rollno?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    hostel_details?: StringFieldUpdateOperationsInput | string
    appointments?: appointmentUpdateManyWithoutPatientNestedInput
    medical_certs?: medical_certificateUpdateManyWithoutPatientNestedInput
  }

  export type patientUncheckedUpdateInput = {
    patient_id?: IntFieldUpdateOperationsInput | number
    rollno?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    hostel_details?: StringFieldUpdateOperationsInput | string
    appointments?: appointmentUncheckedUpdateManyWithoutPatientNestedInput
    medical_certs?: medical_certificateUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type patientCreateManyInput = {
    patient_id: number
    rollno: string
    address: string
    hostel_details: string
  }

  export type patientUpdateManyMutationInput = {
    patient_id?: IntFieldUpdateOperationsInput | number
    rollno?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    hostel_details?: StringFieldUpdateOperationsInput | string
  }

  export type patientUncheckedUpdateManyInput = {
    patient_id?: IntFieldUpdateOperationsInput | number
    rollno?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    hostel_details?: StringFieldUpdateOperationsInput | string
  }

  export type appointmentCreateInput = {
    reason: string
    schedule_time: string
    status?: STATUS | null
    visited?: boolean
    reporting_time?: string | null
    treatment_name?: string | null
    prescription_details?: string | null
    advice?: string | null
    patient: patientCreateNestedOneWithoutAppointmentsInput
  }

  export type appointmentUncheckedCreateInput = {
    app_id?: number
    patient_id: number
    reason: string
    schedule_time: string
    status?: STATUS | null
    visited?: boolean
    reporting_time?: string | null
    treatment_name?: string | null
    prescription_details?: string | null
    advice?: string | null
  }

  export type appointmentUpdateInput = {
    reason?: StringFieldUpdateOperationsInput | string
    schedule_time?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumSTATUSFieldUpdateOperationsInput | STATUS | null
    visited?: BoolFieldUpdateOperationsInput | boolean
    reporting_time?: NullableStringFieldUpdateOperationsInput | string | null
    treatment_name?: NullableStringFieldUpdateOperationsInput | string | null
    prescription_details?: NullableStringFieldUpdateOperationsInput | string | null
    advice?: NullableStringFieldUpdateOperationsInput | string | null
    patient?: patientUpdateOneRequiredWithoutAppointmentsNestedInput
  }

  export type appointmentUncheckedUpdateInput = {
    app_id?: IntFieldUpdateOperationsInput | number
    patient_id?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    schedule_time?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumSTATUSFieldUpdateOperationsInput | STATUS | null
    visited?: BoolFieldUpdateOperationsInput | boolean
    reporting_time?: NullableStringFieldUpdateOperationsInput | string | null
    treatment_name?: NullableStringFieldUpdateOperationsInput | string | null
    prescription_details?: NullableStringFieldUpdateOperationsInput | string | null
    advice?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type appointmentCreateManyInput = {
    app_id?: number
    patient_id: number
    reason: string
    schedule_time: string
    status?: STATUS | null
    visited?: boolean
    reporting_time?: string | null
    treatment_name?: string | null
    prescription_details?: string | null
    advice?: string | null
  }

  export type appointmentUpdateManyMutationInput = {
    reason?: StringFieldUpdateOperationsInput | string
    schedule_time?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumSTATUSFieldUpdateOperationsInput | STATUS | null
    visited?: BoolFieldUpdateOperationsInput | boolean
    reporting_time?: NullableStringFieldUpdateOperationsInput | string | null
    treatment_name?: NullableStringFieldUpdateOperationsInput | string | null
    prescription_details?: NullableStringFieldUpdateOperationsInput | string | null
    advice?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type appointmentUncheckedUpdateManyInput = {
    app_id?: IntFieldUpdateOperationsInput | number
    patient_id?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    schedule_time?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumSTATUSFieldUpdateOperationsInput | STATUS | null
    visited?: BoolFieldUpdateOperationsInput | boolean
    reporting_time?: NullableStringFieldUpdateOperationsInput | string | null
    treatment_name?: NullableStringFieldUpdateOperationsInput | string | null
    prescription_details?: NullableStringFieldUpdateOperationsInput | string | null
    advice?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type medical_certificateCreateInput = {
    app_id: number
    purpose: string
    duration: string
    requested_at: string
    status?: STATUS
    approved_at?: string | null
    approved_by?: string | null
    patient: patientCreateNestedOneWithoutMedical_certsInput
  }

  export type medical_certificateUncheckedCreateInput = {
    mc_id?: number
    patient_id: number
    app_id: number
    purpose: string
    duration: string
    requested_at: string
    status?: STATUS
    approved_at?: string | null
    approved_by?: string | null
  }

  export type medical_certificateUpdateInput = {
    app_id?: IntFieldUpdateOperationsInput | number
    purpose?: StringFieldUpdateOperationsInput | string
    duration?: StringFieldUpdateOperationsInput | string
    requested_at?: StringFieldUpdateOperationsInput | string
    status?: EnumSTATUSFieldUpdateOperationsInput | STATUS
    approved_at?: NullableStringFieldUpdateOperationsInput | string | null
    approved_by?: NullableStringFieldUpdateOperationsInput | string | null
    patient?: patientUpdateOneRequiredWithoutMedical_certsNestedInput
  }

  export type medical_certificateUncheckedUpdateInput = {
    mc_id?: IntFieldUpdateOperationsInput | number
    patient_id?: IntFieldUpdateOperationsInput | number
    app_id?: IntFieldUpdateOperationsInput | number
    purpose?: StringFieldUpdateOperationsInput | string
    duration?: StringFieldUpdateOperationsInput | string
    requested_at?: StringFieldUpdateOperationsInput | string
    status?: EnumSTATUSFieldUpdateOperationsInput | STATUS
    approved_at?: NullableStringFieldUpdateOperationsInput | string | null
    approved_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type medical_certificateCreateManyInput = {
    mc_id?: number
    patient_id: number
    app_id: number
    purpose: string
    duration: string
    requested_at: string
    status?: STATUS
    approved_at?: string | null
    approved_by?: string | null
  }

  export type medical_certificateUpdateManyMutationInput = {
    app_id?: IntFieldUpdateOperationsInput | number
    purpose?: StringFieldUpdateOperationsInput | string
    duration?: StringFieldUpdateOperationsInput | string
    requested_at?: StringFieldUpdateOperationsInput | string
    status?: EnumSTATUSFieldUpdateOperationsInput | STATUS
    approved_at?: NullableStringFieldUpdateOperationsInput | string | null
    approved_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type medical_certificateUncheckedUpdateManyInput = {
    mc_id?: IntFieldUpdateOperationsInput | number
    patient_id?: IntFieldUpdateOperationsInput | number
    app_id?: IntFieldUpdateOperationsInput | number
    purpose?: StringFieldUpdateOperationsInput | string
    duration?: StringFieldUpdateOperationsInput | string
    requested_at?: StringFieldUpdateOperationsInput | string
    status?: EnumSTATUSFieldUpdateOperationsInput | STATUS
    approved_at?: NullableStringFieldUpdateOperationsInput | string | null
    approved_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type sessionsCreateInput = {
    email: string
    token: string
    generated_at: Date | string
  }

  export type sessionsUncheckedCreateInput = {
    email: string
    token: string
    generated_at: Date | string
  }

  export type sessionsUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    generated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type sessionsUncheckedUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    generated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type sessionsCreateManyInput = {
    email: string
    token: string
    generated_at: Date | string
  }

  export type sessionsUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    generated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type sessionsUncheckedUpdateManyInput = {
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    generated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type usersCountOrderByAggregateInput = {
    user_id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    gender?: SortOrder
    dob?: SortOrder
    phone?: SortOrder
    role?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    user_id?: SortOrder
    role?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    user_id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    gender?: SortOrder
    dob?: SortOrder
    phone?: SortOrder
    role?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    user_id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    gender?: SortOrder
    dob?: SortOrder
    phone?: SortOrder
    role?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    user_id?: SortOrder
    role?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type AppointmentListRelationFilter = {
    every?: appointmentWhereInput
    some?: appointmentWhereInput
    none?: appointmentWhereInput
  }

  export type Medical_certificateListRelationFilter = {
    every?: medical_certificateWhereInput
    some?: medical_certificateWhereInput
    none?: medical_certificateWhereInput
  }

  export type appointmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type medical_certificateOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type patientCountOrderByAggregateInput = {
    patient_id?: SortOrder
    rollno?: SortOrder
    address?: SortOrder
    hostel_details?: SortOrder
  }

  export type patientAvgOrderByAggregateInput = {
    patient_id?: SortOrder
  }

  export type patientMaxOrderByAggregateInput = {
    patient_id?: SortOrder
    rollno?: SortOrder
    address?: SortOrder
    hostel_details?: SortOrder
  }

  export type patientMinOrderByAggregateInput = {
    patient_id?: SortOrder
    rollno?: SortOrder
    address?: SortOrder
    hostel_details?: SortOrder
  }

  export type patientSumOrderByAggregateInput = {
    patient_id?: SortOrder
  }

  export type EnumSTATUSNullableFilter = {
    equals?: STATUS | null
    in?: Enumerable<STATUS> | null
    notIn?: Enumerable<STATUS> | null
    not?: NestedEnumSTATUSNullableFilter | STATUS | null
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type PatientRelationFilter = {
    is?: patientWhereInput
    isNot?: patientWhereInput
  }

  export type appointmentCountOrderByAggregateInput = {
    app_id?: SortOrder
    patient_id?: SortOrder
    reason?: SortOrder
    schedule_time?: SortOrder
    status?: SortOrder
    visited?: SortOrder
    reporting_time?: SortOrder
    treatment_name?: SortOrder
    prescription_details?: SortOrder
    advice?: SortOrder
  }

  export type appointmentAvgOrderByAggregateInput = {
    app_id?: SortOrder
    patient_id?: SortOrder
  }

  export type appointmentMaxOrderByAggregateInput = {
    app_id?: SortOrder
    patient_id?: SortOrder
    reason?: SortOrder
    schedule_time?: SortOrder
    status?: SortOrder
    visited?: SortOrder
    reporting_time?: SortOrder
    treatment_name?: SortOrder
    prescription_details?: SortOrder
    advice?: SortOrder
  }

  export type appointmentMinOrderByAggregateInput = {
    app_id?: SortOrder
    patient_id?: SortOrder
    reason?: SortOrder
    schedule_time?: SortOrder
    status?: SortOrder
    visited?: SortOrder
    reporting_time?: SortOrder
    treatment_name?: SortOrder
    prescription_details?: SortOrder
    advice?: SortOrder
  }

  export type appointmentSumOrderByAggregateInput = {
    app_id?: SortOrder
    patient_id?: SortOrder
  }

  export type EnumSTATUSNullableWithAggregatesFilter = {
    equals?: STATUS | null
    in?: Enumerable<STATUS> | null
    notIn?: Enumerable<STATUS> | null
    not?: NestedEnumSTATUSNullableWithAggregatesFilter | STATUS | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumSTATUSNullableFilter
    _max?: NestedEnumSTATUSNullableFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type EnumSTATUSFilter = {
    equals?: STATUS
    in?: Enumerable<STATUS>
    notIn?: Enumerable<STATUS>
    not?: NestedEnumSTATUSFilter | STATUS
  }

  export type medical_certificateCountOrderByAggregateInput = {
    mc_id?: SortOrder
    patient_id?: SortOrder
    app_id?: SortOrder
    purpose?: SortOrder
    duration?: SortOrder
    requested_at?: SortOrder
    status?: SortOrder
    approved_at?: SortOrder
    approved_by?: SortOrder
  }

  export type medical_certificateAvgOrderByAggregateInput = {
    mc_id?: SortOrder
    patient_id?: SortOrder
    app_id?: SortOrder
  }

  export type medical_certificateMaxOrderByAggregateInput = {
    mc_id?: SortOrder
    patient_id?: SortOrder
    app_id?: SortOrder
    purpose?: SortOrder
    duration?: SortOrder
    requested_at?: SortOrder
    status?: SortOrder
    approved_at?: SortOrder
    approved_by?: SortOrder
  }

  export type medical_certificateMinOrderByAggregateInput = {
    mc_id?: SortOrder
    patient_id?: SortOrder
    app_id?: SortOrder
    purpose?: SortOrder
    duration?: SortOrder
    requested_at?: SortOrder
    status?: SortOrder
    approved_at?: SortOrder
    approved_by?: SortOrder
  }

  export type medical_certificateSumOrderByAggregateInput = {
    mc_id?: SortOrder
    patient_id?: SortOrder
    app_id?: SortOrder
  }

  export type EnumSTATUSWithAggregatesFilter = {
    equals?: STATUS
    in?: Enumerable<STATUS>
    notIn?: Enumerable<STATUS>
    not?: NestedEnumSTATUSWithAggregatesFilter | STATUS
    _count?: NestedIntFilter
    _min?: NestedEnumSTATUSFilter
    _max?: NestedEnumSTATUSFilter
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type sessionsCountOrderByAggregateInput = {
    email?: SortOrder
    token?: SortOrder
    generated_at?: SortOrder
  }

  export type sessionsMaxOrderByAggregateInput = {
    email?: SortOrder
    token?: SortOrder
    generated_at?: SortOrder
  }

  export type sessionsMinOrderByAggregateInput = {
    email?: SortOrder
    token?: SortOrder
    generated_at?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type appointmentCreateNestedManyWithoutPatientInput = {
    create?: XOR<Enumerable<appointmentCreateWithoutPatientInput>, Enumerable<appointmentUncheckedCreateWithoutPatientInput>>
    connectOrCreate?: Enumerable<appointmentCreateOrConnectWithoutPatientInput>
    createMany?: appointmentCreateManyPatientInputEnvelope
    connect?: Enumerable<appointmentWhereUniqueInput>
  }

  export type medical_certificateCreateNestedManyWithoutPatientInput = {
    create?: XOR<Enumerable<medical_certificateCreateWithoutPatientInput>, Enumerable<medical_certificateUncheckedCreateWithoutPatientInput>>
    connectOrCreate?: Enumerable<medical_certificateCreateOrConnectWithoutPatientInput>
    createMany?: medical_certificateCreateManyPatientInputEnvelope
    connect?: Enumerable<medical_certificateWhereUniqueInput>
  }

  export type appointmentUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<Enumerable<appointmentCreateWithoutPatientInput>, Enumerable<appointmentUncheckedCreateWithoutPatientInput>>
    connectOrCreate?: Enumerable<appointmentCreateOrConnectWithoutPatientInput>
    createMany?: appointmentCreateManyPatientInputEnvelope
    connect?: Enumerable<appointmentWhereUniqueInput>
  }

  export type medical_certificateUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<Enumerable<medical_certificateCreateWithoutPatientInput>, Enumerable<medical_certificateUncheckedCreateWithoutPatientInput>>
    connectOrCreate?: Enumerable<medical_certificateCreateOrConnectWithoutPatientInput>
    createMany?: medical_certificateCreateManyPatientInputEnvelope
    connect?: Enumerable<medical_certificateWhereUniqueInput>
  }

  export type appointmentUpdateManyWithoutPatientNestedInput = {
    create?: XOR<Enumerable<appointmentCreateWithoutPatientInput>, Enumerable<appointmentUncheckedCreateWithoutPatientInput>>
    connectOrCreate?: Enumerable<appointmentCreateOrConnectWithoutPatientInput>
    upsert?: Enumerable<appointmentUpsertWithWhereUniqueWithoutPatientInput>
    createMany?: appointmentCreateManyPatientInputEnvelope
    set?: Enumerable<appointmentWhereUniqueInput>
    disconnect?: Enumerable<appointmentWhereUniqueInput>
    delete?: Enumerable<appointmentWhereUniqueInput>
    connect?: Enumerable<appointmentWhereUniqueInput>
    update?: Enumerable<appointmentUpdateWithWhereUniqueWithoutPatientInput>
    updateMany?: Enumerable<appointmentUpdateManyWithWhereWithoutPatientInput>
    deleteMany?: Enumerable<appointmentScalarWhereInput>
  }

  export type medical_certificateUpdateManyWithoutPatientNestedInput = {
    create?: XOR<Enumerable<medical_certificateCreateWithoutPatientInput>, Enumerable<medical_certificateUncheckedCreateWithoutPatientInput>>
    connectOrCreate?: Enumerable<medical_certificateCreateOrConnectWithoutPatientInput>
    upsert?: Enumerable<medical_certificateUpsertWithWhereUniqueWithoutPatientInput>
    createMany?: medical_certificateCreateManyPatientInputEnvelope
    set?: Enumerable<medical_certificateWhereUniqueInput>
    disconnect?: Enumerable<medical_certificateWhereUniqueInput>
    delete?: Enumerable<medical_certificateWhereUniqueInput>
    connect?: Enumerable<medical_certificateWhereUniqueInput>
    update?: Enumerable<medical_certificateUpdateWithWhereUniqueWithoutPatientInput>
    updateMany?: Enumerable<medical_certificateUpdateManyWithWhereWithoutPatientInput>
    deleteMany?: Enumerable<medical_certificateScalarWhereInput>
  }

  export type appointmentUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<Enumerable<appointmentCreateWithoutPatientInput>, Enumerable<appointmentUncheckedCreateWithoutPatientInput>>
    connectOrCreate?: Enumerable<appointmentCreateOrConnectWithoutPatientInput>
    upsert?: Enumerable<appointmentUpsertWithWhereUniqueWithoutPatientInput>
    createMany?: appointmentCreateManyPatientInputEnvelope
    set?: Enumerable<appointmentWhereUniqueInput>
    disconnect?: Enumerable<appointmentWhereUniqueInput>
    delete?: Enumerable<appointmentWhereUniqueInput>
    connect?: Enumerable<appointmentWhereUniqueInput>
    update?: Enumerable<appointmentUpdateWithWhereUniqueWithoutPatientInput>
    updateMany?: Enumerable<appointmentUpdateManyWithWhereWithoutPatientInput>
    deleteMany?: Enumerable<appointmentScalarWhereInput>
  }

  export type medical_certificateUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<Enumerable<medical_certificateCreateWithoutPatientInput>, Enumerable<medical_certificateUncheckedCreateWithoutPatientInput>>
    connectOrCreate?: Enumerable<medical_certificateCreateOrConnectWithoutPatientInput>
    upsert?: Enumerable<medical_certificateUpsertWithWhereUniqueWithoutPatientInput>
    createMany?: medical_certificateCreateManyPatientInputEnvelope
    set?: Enumerable<medical_certificateWhereUniqueInput>
    disconnect?: Enumerable<medical_certificateWhereUniqueInput>
    delete?: Enumerable<medical_certificateWhereUniqueInput>
    connect?: Enumerable<medical_certificateWhereUniqueInput>
    update?: Enumerable<medical_certificateUpdateWithWhereUniqueWithoutPatientInput>
    updateMany?: Enumerable<medical_certificateUpdateManyWithWhereWithoutPatientInput>
    deleteMany?: Enumerable<medical_certificateScalarWhereInput>
  }

  export type patientCreateNestedOneWithoutAppointmentsInput = {
    create?: XOR<patientCreateWithoutAppointmentsInput, patientUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: patientCreateOrConnectWithoutAppointmentsInput
    connect?: patientWhereUniqueInput
  }

  export type NullableEnumSTATUSFieldUpdateOperationsInput = {
    set?: STATUS | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type patientUpdateOneRequiredWithoutAppointmentsNestedInput = {
    create?: XOR<patientCreateWithoutAppointmentsInput, patientUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: patientCreateOrConnectWithoutAppointmentsInput
    upsert?: patientUpsertWithoutAppointmentsInput
    connect?: patientWhereUniqueInput
    update?: XOR<patientUpdateWithoutAppointmentsInput, patientUncheckedUpdateWithoutAppointmentsInput>
  }

  export type patientCreateNestedOneWithoutMedical_certsInput = {
    create?: XOR<patientCreateWithoutMedical_certsInput, patientUncheckedCreateWithoutMedical_certsInput>
    connectOrCreate?: patientCreateOrConnectWithoutMedical_certsInput
    connect?: patientWhereUniqueInput
  }

  export type EnumSTATUSFieldUpdateOperationsInput = {
    set?: STATUS
  }

  export type patientUpdateOneRequiredWithoutMedical_certsNestedInput = {
    create?: XOR<patientCreateWithoutMedical_certsInput, patientUncheckedCreateWithoutMedical_certsInput>
    connectOrCreate?: patientCreateOrConnectWithoutMedical_certsInput
    upsert?: patientUpsertWithoutMedical_certsInput
    connect?: patientWhereUniqueInput
    update?: XOR<patientUpdateWithoutMedical_certsInput, patientUncheckedUpdateWithoutMedical_certsInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedEnumSTATUSNullableFilter = {
    equals?: STATUS | null
    in?: Enumerable<STATUS> | null
    notIn?: Enumerable<STATUS> | null
    not?: NestedEnumSTATUSNullableFilter | STATUS | null
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedEnumSTATUSNullableWithAggregatesFilter = {
    equals?: STATUS | null
    in?: Enumerable<STATUS> | null
    notIn?: Enumerable<STATUS> | null
    not?: NestedEnumSTATUSNullableWithAggregatesFilter | STATUS | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumSTATUSNullableFilter
    _max?: NestedEnumSTATUSNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedEnumSTATUSFilter = {
    equals?: STATUS
    in?: Enumerable<STATUS>
    notIn?: Enumerable<STATUS>
    not?: NestedEnumSTATUSFilter | STATUS
  }

  export type NestedEnumSTATUSWithAggregatesFilter = {
    equals?: STATUS
    in?: Enumerable<STATUS>
    notIn?: Enumerable<STATUS>
    not?: NestedEnumSTATUSWithAggregatesFilter | STATUS
    _count?: NestedIntFilter
    _min?: NestedEnumSTATUSFilter
    _max?: NestedEnumSTATUSFilter
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type appointmentCreateWithoutPatientInput = {
    reason: string
    schedule_time: string
    status?: STATUS | null
    visited?: boolean
    reporting_time?: string | null
    treatment_name?: string | null
    prescription_details?: string | null
    advice?: string | null
  }

  export type appointmentUncheckedCreateWithoutPatientInput = {
    app_id?: number
    reason: string
    schedule_time: string
    status?: STATUS | null
    visited?: boolean
    reporting_time?: string | null
    treatment_name?: string | null
    prescription_details?: string | null
    advice?: string | null
  }

  export type appointmentCreateOrConnectWithoutPatientInput = {
    where: appointmentWhereUniqueInput
    create: XOR<appointmentCreateWithoutPatientInput, appointmentUncheckedCreateWithoutPatientInput>
  }

  export type appointmentCreateManyPatientInputEnvelope = {
    data: Enumerable<appointmentCreateManyPatientInput>
    skipDuplicates?: boolean
  }

  export type medical_certificateCreateWithoutPatientInput = {
    app_id: number
    purpose: string
    duration: string
    requested_at: string
    status?: STATUS
    approved_at?: string | null
    approved_by?: string | null
  }

  export type medical_certificateUncheckedCreateWithoutPatientInput = {
    mc_id?: number
    app_id: number
    purpose: string
    duration: string
    requested_at: string
    status?: STATUS
    approved_at?: string | null
    approved_by?: string | null
  }

  export type medical_certificateCreateOrConnectWithoutPatientInput = {
    where: medical_certificateWhereUniqueInput
    create: XOR<medical_certificateCreateWithoutPatientInput, medical_certificateUncheckedCreateWithoutPatientInput>
  }

  export type medical_certificateCreateManyPatientInputEnvelope = {
    data: Enumerable<medical_certificateCreateManyPatientInput>
    skipDuplicates?: boolean
  }

  export type appointmentUpsertWithWhereUniqueWithoutPatientInput = {
    where: appointmentWhereUniqueInput
    update: XOR<appointmentUpdateWithoutPatientInput, appointmentUncheckedUpdateWithoutPatientInput>
    create: XOR<appointmentCreateWithoutPatientInput, appointmentUncheckedCreateWithoutPatientInput>
  }

  export type appointmentUpdateWithWhereUniqueWithoutPatientInput = {
    where: appointmentWhereUniqueInput
    data: XOR<appointmentUpdateWithoutPatientInput, appointmentUncheckedUpdateWithoutPatientInput>
  }

  export type appointmentUpdateManyWithWhereWithoutPatientInput = {
    where: appointmentScalarWhereInput
    data: XOR<appointmentUpdateManyMutationInput, appointmentUncheckedUpdateManyWithoutAppointmentsInput>
  }

  export type appointmentScalarWhereInput = {
    AND?: Enumerable<appointmentScalarWhereInput>
    OR?: Enumerable<appointmentScalarWhereInput>
    NOT?: Enumerable<appointmentScalarWhereInput>
    app_id?: IntFilter | number
    patient_id?: IntFilter | number
    reason?: StringFilter | string
    schedule_time?: StringFilter | string
    status?: EnumSTATUSNullableFilter | STATUS | null
    visited?: BoolFilter | boolean
    reporting_time?: StringNullableFilter | string | null
    treatment_name?: StringNullableFilter | string | null
    prescription_details?: StringNullableFilter | string | null
    advice?: StringNullableFilter | string | null
  }

  export type medical_certificateUpsertWithWhereUniqueWithoutPatientInput = {
    where: medical_certificateWhereUniqueInput
    update: XOR<medical_certificateUpdateWithoutPatientInput, medical_certificateUncheckedUpdateWithoutPatientInput>
    create: XOR<medical_certificateCreateWithoutPatientInput, medical_certificateUncheckedCreateWithoutPatientInput>
  }

  export type medical_certificateUpdateWithWhereUniqueWithoutPatientInput = {
    where: medical_certificateWhereUniqueInput
    data: XOR<medical_certificateUpdateWithoutPatientInput, medical_certificateUncheckedUpdateWithoutPatientInput>
  }

  export type medical_certificateUpdateManyWithWhereWithoutPatientInput = {
    where: medical_certificateScalarWhereInput
    data: XOR<medical_certificateUpdateManyMutationInput, medical_certificateUncheckedUpdateManyWithoutMedical_certsInput>
  }

  export type medical_certificateScalarWhereInput = {
    AND?: Enumerable<medical_certificateScalarWhereInput>
    OR?: Enumerable<medical_certificateScalarWhereInput>
    NOT?: Enumerable<medical_certificateScalarWhereInput>
    mc_id?: IntFilter | number
    patient_id?: IntFilter | number
    app_id?: IntFilter | number
    purpose?: StringFilter | string
    duration?: StringFilter | string
    requested_at?: StringFilter | string
    status?: EnumSTATUSFilter | STATUS
    approved_at?: StringNullableFilter | string | null
    approved_by?: StringNullableFilter | string | null
  }

  export type patientCreateWithoutAppointmentsInput = {
    patient_id: number
    rollno: string
    address: string
    hostel_details: string
    medical_certs?: medical_certificateCreateNestedManyWithoutPatientInput
  }

  export type patientUncheckedCreateWithoutAppointmentsInput = {
    patient_id: number
    rollno: string
    address: string
    hostel_details: string
    medical_certs?: medical_certificateUncheckedCreateNestedManyWithoutPatientInput
  }

  export type patientCreateOrConnectWithoutAppointmentsInput = {
    where: patientWhereUniqueInput
    create: XOR<patientCreateWithoutAppointmentsInput, patientUncheckedCreateWithoutAppointmentsInput>
  }

  export type patientUpsertWithoutAppointmentsInput = {
    update: XOR<patientUpdateWithoutAppointmentsInput, patientUncheckedUpdateWithoutAppointmentsInput>
    create: XOR<patientCreateWithoutAppointmentsInput, patientUncheckedCreateWithoutAppointmentsInput>
  }

  export type patientUpdateWithoutAppointmentsInput = {
    patient_id?: IntFieldUpdateOperationsInput | number
    rollno?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    hostel_details?: StringFieldUpdateOperationsInput | string
    medical_certs?: medical_certificateUpdateManyWithoutPatientNestedInput
  }

  export type patientUncheckedUpdateWithoutAppointmentsInput = {
    patient_id?: IntFieldUpdateOperationsInput | number
    rollno?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    hostel_details?: StringFieldUpdateOperationsInput | string
    medical_certs?: medical_certificateUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type patientCreateWithoutMedical_certsInput = {
    patient_id: number
    rollno: string
    address: string
    hostel_details: string
    appointments?: appointmentCreateNestedManyWithoutPatientInput
  }

  export type patientUncheckedCreateWithoutMedical_certsInput = {
    patient_id: number
    rollno: string
    address: string
    hostel_details: string
    appointments?: appointmentUncheckedCreateNestedManyWithoutPatientInput
  }

  export type patientCreateOrConnectWithoutMedical_certsInput = {
    where: patientWhereUniqueInput
    create: XOR<patientCreateWithoutMedical_certsInput, patientUncheckedCreateWithoutMedical_certsInput>
  }

  export type patientUpsertWithoutMedical_certsInput = {
    update: XOR<patientUpdateWithoutMedical_certsInput, patientUncheckedUpdateWithoutMedical_certsInput>
    create: XOR<patientCreateWithoutMedical_certsInput, patientUncheckedCreateWithoutMedical_certsInput>
  }

  export type patientUpdateWithoutMedical_certsInput = {
    patient_id?: IntFieldUpdateOperationsInput | number
    rollno?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    hostel_details?: StringFieldUpdateOperationsInput | string
    appointments?: appointmentUpdateManyWithoutPatientNestedInput
  }

  export type patientUncheckedUpdateWithoutMedical_certsInput = {
    patient_id?: IntFieldUpdateOperationsInput | number
    rollno?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    hostel_details?: StringFieldUpdateOperationsInput | string
    appointments?: appointmentUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type appointmentCreateManyPatientInput = {
    app_id?: number
    reason: string
    schedule_time: string
    status?: STATUS | null
    visited?: boolean
    reporting_time?: string | null
    treatment_name?: string | null
    prescription_details?: string | null
    advice?: string | null
  }

  export type medical_certificateCreateManyPatientInput = {
    mc_id?: number
    app_id: number
    purpose: string
    duration: string
    requested_at: string
    status?: STATUS
    approved_at?: string | null
    approved_by?: string | null
  }

  export type appointmentUpdateWithoutPatientInput = {
    reason?: StringFieldUpdateOperationsInput | string
    schedule_time?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumSTATUSFieldUpdateOperationsInput | STATUS | null
    visited?: BoolFieldUpdateOperationsInput | boolean
    reporting_time?: NullableStringFieldUpdateOperationsInput | string | null
    treatment_name?: NullableStringFieldUpdateOperationsInput | string | null
    prescription_details?: NullableStringFieldUpdateOperationsInput | string | null
    advice?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type appointmentUncheckedUpdateWithoutPatientInput = {
    app_id?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    schedule_time?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumSTATUSFieldUpdateOperationsInput | STATUS | null
    visited?: BoolFieldUpdateOperationsInput | boolean
    reporting_time?: NullableStringFieldUpdateOperationsInput | string | null
    treatment_name?: NullableStringFieldUpdateOperationsInput | string | null
    prescription_details?: NullableStringFieldUpdateOperationsInput | string | null
    advice?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type appointmentUncheckedUpdateManyWithoutAppointmentsInput = {
    app_id?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    schedule_time?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumSTATUSFieldUpdateOperationsInput | STATUS | null
    visited?: BoolFieldUpdateOperationsInput | boolean
    reporting_time?: NullableStringFieldUpdateOperationsInput | string | null
    treatment_name?: NullableStringFieldUpdateOperationsInput | string | null
    prescription_details?: NullableStringFieldUpdateOperationsInput | string | null
    advice?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type medical_certificateUpdateWithoutPatientInput = {
    app_id?: IntFieldUpdateOperationsInput | number
    purpose?: StringFieldUpdateOperationsInput | string
    duration?: StringFieldUpdateOperationsInput | string
    requested_at?: StringFieldUpdateOperationsInput | string
    status?: EnumSTATUSFieldUpdateOperationsInput | STATUS
    approved_at?: NullableStringFieldUpdateOperationsInput | string | null
    approved_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type medical_certificateUncheckedUpdateWithoutPatientInput = {
    mc_id?: IntFieldUpdateOperationsInput | number
    app_id?: IntFieldUpdateOperationsInput | number
    purpose?: StringFieldUpdateOperationsInput | string
    duration?: StringFieldUpdateOperationsInput | string
    requested_at?: StringFieldUpdateOperationsInput | string
    status?: EnumSTATUSFieldUpdateOperationsInput | STATUS
    approved_at?: NullableStringFieldUpdateOperationsInput | string | null
    approved_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type medical_certificateUncheckedUpdateManyWithoutMedical_certsInput = {
    mc_id?: IntFieldUpdateOperationsInput | number
    app_id?: IntFieldUpdateOperationsInput | number
    purpose?: StringFieldUpdateOperationsInput | string
    duration?: StringFieldUpdateOperationsInput | string
    requested_at?: StringFieldUpdateOperationsInput | string
    status?: EnumSTATUSFieldUpdateOperationsInput | STATUS
    approved_at?: NullableStringFieldUpdateOperationsInput | string | null
    approved_by?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}